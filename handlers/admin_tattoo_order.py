from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp, bot
from keyboards import kb_client, kb_admin
from aiogram.dispatcher.filters import Text
from handlers.client import (
    generate_random_order_number,
    CODE_LENTH,
    ORDER_CODE_LENTH,
    ADMIN_NAMES,
    CALENDAR_ID,
)

from db.db_setter import set_to_table
from db.db_updater import update_info
from db.db_delete_info import delete_info
from db.db_getter import get_info_many_from_table, DB_NAME, sqlite3

from sqlalchemy.orm import Session
from sqlalchemy import select, ScalarResult
from db.sqlalchemy_base.db_classes import *

from validate import check_pdf_document_payment, check_photo_payment

# from diffusers import StableDiffusionPipeline
# import torch

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# from datetime import datetime
import datetime
from aiogram.types.message import ContentType
from aiogram_calendar import simple_cal_callback, dialog_cal_callback, DialogCalendar
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup
from aiogram_timepicker.panel import FullTimePicker, full_timep_callback
from aiogram_timepicker import result, carousel, clock

from handlers.calendar_client import obj
from msg.main_msg import *
import re
from handlers.other import *


# ----------------------------------- TATTOO ORDER COMMANDS LIST-----------------------------------
async def get_tattoo_order_and_item_command_list(message: types.Message):
    if (
        message.text.lower() in ["—Ç–∞—Ç—É –∑–∞–∫–∞–∑—ã", "/—Ç–∞—Ç—É_–∑–∞–∫–∞–∑—ã"]
        and str(message.from_user.username) in ADMIN_NAMES
    ):
        await message.reply(
            "–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –∑–∞–∫–∞–∑–æ–≤ —Ç–∞—Ç—É —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å?",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )


# ------------------------------------- TATTOO ORDER COMMANDS-----------------------------------
async def send_to_view_tattoo_order(
    message: types.Message, tattoo_orders: ScalarResult["Orders"]
):
    if tattoo_orders == []:
            await bot.send_message(
                message.from_id,
                MSG_NO_ORDER_IN_TABLE,
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
    else:
        for order in tattoo_orders:
            with Session(engine) as session:
                user = session.scalars(
                    select(User).where(User.name == order.username)
                ).all()

            if user != []:
                for item in user:
                    username_telegram = (
                        "–ë–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞"
                        if item.telegram_name in ["", None]
                        else item.telegram_name
                    )
                    username_phone = (
                        "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞" if item.phone in ["", None] else item.phone
                    )
            else:
                username_telegram = "–ë–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞"
                username_phone = "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"

            msg = f"–¢–∞—Ç—É –∑–∞–∫–∞–∑ ‚Ññ {order.order_number} –æ—Ç {order.creation_date}\n"

            msg += (
                f"ü™¥ –¢–∏–ø —Ç–∞—Ç—É: {order.order_type}\n"
                f"üçÉ –ò–º—è: {order.order_name}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {order.tattoo_size}\n"
                f"üìú –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ç—É: {order.tattoo_note}\n"
                f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order.order_note}\n"
                f"üé® {order.colored} —Ç–∞—Ç—É\n"
                f"üë§ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–∞—Ç—É: {order.bodyplace}\n"
                f"- –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {order.price}\n"
                f"- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {order.username}\n"
                f"- Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username_telegram}\n"
                f"- –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username_phone}\n"
            )
            if order.order_type == "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ç–∞—Ç—É":
                i = 0
                if order.schedule_id is not None:
                    msg += "üïí –î–∞—Ç—ã –≤—Å—Ç—Ä–µ—á:\n"
                    schedule_lst = session.scalars(
                        select(ScheduleCalendarItems).where(
                            ScheduleCalendarItems.order_number == order.order_number
                        )
                    ).all()

                    for schedule in schedule_lst:
                        i += 1
                        start_time = session.get(
                            ScheduleCalendar, schedule.schedule_id
                        ).start_datetime.strftime("%d/%m/%Y —Å %H:%M")
                        
                        end_time = session.get(
                            ScheduleCalendar, schedule.schedule_id
                        ).end_datetime.strftime("%H:%M")

                        msg += f"\t{i}) {start_time} –¥–æ {end_time}\n"
                else:
                    msg += (f"üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã - "
                        "—Å–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ—Ç.\n")
            tattoo_photos = session.scalars(select(OrderPhoto)
                .where(OrderPhoto.order_id == order.id)).all()
            body_photos = session.scalars(select(TattooPlacePhoto)
                .where(TattooPlacePhoto.order_id == order.id)).all()

            if order.order_state in list(STATES["closed"].values()):
                msg += f"‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order.order_state}\n"
            else:
                msg += f"üìÉ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order.order_state}\n"
            
            media = []
            for photo in tattoo_photos + body_photos:
                media.append(types.InputMediaPhoto(photo.photo))

            await bot.send_media_group(message.from_user.id, media=media)
            
            with Session(engine) as session:
                check_document = session.scalars(
                    select(CheckDocument).where(CheckDocument.id == order.order_number)
                ).all()
            if check_document not in [[], None]:
                print(order.check_document)  # TODO —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ —á–µ–∫–æ–≤
                for doc in check_document:
                    if doc is not None and doc.doc is not None:
                        try:
                            await bot.send_document(
                                message.from_user.id, doc.doc, "–ß–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"
                            )
                        except:
                            await bot.send_photo(
                                message.from_user.id, doc.doc, "–ß–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"
                            )
                    else:
                        msg += "‚ùå –ß–µ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
            else:
                msg += "‚ùå –ß–µ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
            await bot.send_message(message.from_id, msg)


# ------------------------------------------ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑—ã--------------------------------
class FSM_Admin_get_info_orders(StatesGroup):
    order_status_name = State()


# /–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑—ã
async def command_get_info_tattoo_orders(message: types.Message):
    # print("–∏—â–µ–º –∑–∞–∫–∞–∑—ã –≤ —Ç–∞–±–ª–∏—Ü–µ tattoo_orders")
    if (
        message.text in ["–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑—ã", "/–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑—ã"]
        and str(message.from_user.username) in ADMIN_NAMES
    ):
        with Session(engine) as session:
            orders = session.scalars(
                select(Orders)
                    .where(Orders.order_type.in_([kb_admin.price_lst_types["constant_tattoo"],
                        kb_admin.price_lst_types["shifting_tattoo"]]))
                ).all()
            
        if orders == []:
            await bot.send_message(
                message.from_id,
                MSG_NO_ORDER_IN_TABLE,
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
        else:
            await FSM_Admin_get_info_orders.order_status_name.set()
            await bot.send_message(
                message.from_user.id,
                MSG_WHITH_ORDER_STATE_ADMIN_WANT_TO_SEE,
                reply_markup=kb_admin.kb_order_statuses,
            )


async def get_status_name(message: types.Message, state: FSMContext):
    if message.text in statuses_order_lst:
        with Session(engine) as session:
            orders = session.scalars(
                select(Orders)
                    .where(Orders.order_state == message.text)
                    .where(Orders.order_type.in_([kb_admin.price_lst_types["constant_tattoo"],
                        kb_admin.price_lst_types["shifting_tattoo"]]))
            ).all()

        await send_to_view_tattoo_order(message, orders)

        await bot.send_message(
            message.from_user.id,
            MSG_DO_CLIENT_WANT_TO_DO_MORE,
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()

    elif message.text in LIST_BACK_COMMANDS + LIST_BACK_TO_HOME + LIST_CANCEL_COMMANDS:
        await bot.send_message(
            message.from_user.id,
            MSG_BACK_TO_HOME,
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()

    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ "–ù–∞–∑–∞–¥"')


# ------------------------------------- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑------------------------------
"""
    –û—Ç–∫—Ä—ã—Ç ‚Äî –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –µ—â—ë –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
    –û–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.
    –í—ã–ø–æ–ª–Ω–µ–Ω ‚Äî –≤—Å—è —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
    –û—Ç–∫–ª–æ–Ω–µ–Ω ‚Äî –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º.
    –û—Ç–ª–æ–∂–µ–Ω ‚Äî –∑–∞–∫–∞–∑ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω—ë–º —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏. 
        –¢–æ–ª—å–∫–æ –¥–ª—è –≥–∏—Ñ—Ç–±–æ–∫—Å–∞
    –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω ‚Äî –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.
"""


class FSM_Admin_command_get_info_tattoo_order(StatesGroup):
    order_name = State()


# /–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑
async def command_get_info_tattoo_order(message: types.Message):
    if (
        message.text in ["–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑", "/–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑"]
        and str(message.from_user.username) in ADMIN_NAMES
    ):
        with Session(engine) as session:
            orders = session.scalars(
                select(Orders).where(
                    Orders.order_type.in_([kb_admin.price_lst_types["constant_tattoo"],
                        kb_admin.price_lst_types["shifting_tattoo"]])
                )
            ).all()

        if orders == []:
            await message.reply(MSG_NO_ORDER_IN_TABLE)
        else:
            kb_orders = ReplyKeyboardMarkup(resize_keyboard=True)
            await FSM_Admin_command_get_info_tattoo_order.order_name.set()
            for order in orders:
                kb_orders.add(
                    KeyboardButton(
                        f"{order.order_number} "
                        f'"{order.order_name}" —Å—Ç–∞—Ç—É—Å: {order.order_state}'
                    )
                )

            kb_orders.add(kb_admin.home_btn)
            await bot.send_message(
                message.from_user.id,
                MSG_WHICH_ADMIN_ORDER_WANT_TO_SEE,
                reply_markup=kb_orders,
            )


async def get_name_for_view_tattoo_order(message: types.Message, state: FSMContext):
    if message.text not in LIST_BACK_COMMANDS:
        with Session(engine) as session:
            order = session.scalars(
                select(Orders).where(Orders.order_number == message.text.split()[0])
            ).all()

        await send_to_view_tattoo_order(message, order)
        await bot.send_message(
            message.from_user.id,
            MSG_DO_CLIENT_WANT_TO_DO_MORE,
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()

    elif message.text in LIST_BACK_COMMANDS:
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )
        await state.finish()
    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ "–ù–∞–∑–∞–¥"')


# ------------------------------------------- —É–¥–∞–ª–∏—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑--------------------------------
class FSM_Admin_delete_tattoo_order(StatesGroup):
    tattoo_order_number = State()


# /—É–¥–∞–ª–∏—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑
async def command_delete_info_tattoo_orders(message: types.Message):
    if (
        message.text in ["—É–¥–∞–ª–∏—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑", "/—É–¥–∞–ª–∏—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑"]
        and str(message.from_user.username) in ADMIN_NAMES
    ):
        await message.reply(
            "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.\n"
            f"–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å—ã {', '.join(list(STATES['closed'].values()))},"
            '—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞"'
        )
        with Session(engine) as session:
            orders = session.scalars(
                select(Orders).where(
                    Orders.order_type.in_(["–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ç–∞—Ç—É", "–ø–µ—Ä–µ–≤–æ–¥–Ω–æ–µ —Ç–∞—Ç—É"])
                )
            ).all()
        if orders == []:
            await message.reply(
                "–ü—Ä–æ—Å—Ç–∏, –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–ø–∏—Å–∫–µ, –∞ –∑–Ω–∞—á–∏—Ç –∏ —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ. "
                "–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
        else:
            kb_tattoo_order_numbers = ReplyKeyboardMarkup(resize_keyboard=True)
            for order in orders:
                # –≤—ã–≤–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–∞—Ç—É
                kb_tattoo_order_numbers.add(
                    KeyboardButton(
                        f'{order.order_number} "{order.order_name}" {order.order_state}'
                    )
                )
            kb_tattoo_order_numbers.add(kb_admin.home_btn)
            await FSM_Admin_delete_tattoo_order.tattoo_order_number.set()
            await message.reply(
                "–ö–∞–∫–æ–π –∑–∞–∫–∞–∑ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?", reply_markup=kb_tattoo_order_numbers
            )


async def delete_info_tattoo_orders(message: types.Message, state: FSMContext):
    with Session(engine) as session:
        orders = session.scalars(
            select(Orders).where(
                Orders.order_type.in_([kb_admin.price_lst_types["constant_tattoo"],
                    kb_admin.price_lst_types["shifting_tattoo"]])
            )
        ).all()
    choosen_kb_order_lst = []
    for order in orders:
        choosen_kb_order_lst.append(
            f'{order.order_number} "{order.order_name}" {order.order_state}'
        )

    if message.text in choosen_kb_order_lst:
        with Session(engine) as session:
            order = session.scalars(
                select(Orders).where(Orders.order_number == message.text.split()[0])
            ).one()
            schedule_event = session.scalars(
                select(ScheduleCalendar).where(ScheduleCalendar.id == order.schedule_id)
            ).one()
            session.delete(order)
            schedule_event.status = "–°–≤–æ–±–æ–¥–µ–Ω"
            session.commit()

        # service.events().delete(calendarId='primary', eventId='eventId').execute()
        """ 
        print("---------------------------------")
        print(await obj.get_calendar_events(CALENDAR_ID))
        print("---------------------------------") 
        """
        event_list = await obj.get_calendar_events(CALENDAR_ID)
        # TODO –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –∏–≤–µ–Ω—Ç –∏–∑ Google Calendar
        for event in event_list:
            if event["summary"].split()[4] == message.text.split()[0]:
                await obj.delete_event(CALENDAR_ID, event["id"])

        await message.reply(
            f"–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω. {MSG_DO_CLIENT_WANT_TO_DO_MORE}",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()
    else:
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )
        await state.finish()


# ----------------------------- –∏–∑–º–µ–Ω–∏—Ç—å_—Å—Ç–∞—Ç—É—Å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑–∞--------------------------------
class FSM_Admin_tattoo_order_change_status(StatesGroup):
    tattoo_order_number = State()
    tattoo_order_new_status = State()
    get_answer_for_getting_check_document = State()
    get_price_for_check_document = State()
    get_check_document = State()


# /–∏–∑–º–µ–Ω–∏—Ç—å_—Å—Ç–∞—Ç—É—Å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑–∞, –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞
async def command_tattoo_order_change_status(message: types.Message):
    if (
        message.text in ["–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞", "/–∏–∑–º–µ–Ω–∏—Ç—å_—Å—Ç–∞—Ç—É—Å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑–∞"]
        and str(message.from_user.username) in ADMIN_NAMES
    ):
        with Session(engine) as session:
            orders = session.scalars(
                select(Orders)
                .where(Orders.order_type.in_([kb_admin.price_lst_types["constant_tattoo"],
                    kb_admin.price_lst_types["shifting_tattoo"]]))
                .where(Orders.user_id == message.from_id)
            ).all()
        kb_tattoo_order_numbers = ReplyKeyboardMarkup(resize_keyboard=True)
        if orders == []:
            await message.reply(f"{MSG_NO_ORDER_IN_TABLE}")
        else:
            for order in orders:  # –≤—ã–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä–∞ —Ç–∞—Ç—É –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
                kb_tattoo_order_numbers.add(
                    KeyboardButton(
                        f'{order.order_number} "{order.order_name}" —Å—Ç–∞—Ç—É—Å: {order.order_state}'
                    )
                )
            kb_tattoo_order_numbers.add(kb_admin.home_btn)
            await FSM_Admin_tattoo_order_change_status.tattoo_order_number.set()
            await message.reply(
                MSG_WHICH_ADMIN_ORDER_WANT_TO_CHANGE,
                reply_markup=kb_tattoo_order_numbers,
            )
    # await message.delete()


async def get_new_status_for_tattoo_order(message: types.Message, state: FSMContext):
    with Session(engine) as session:
        orders = session.scalars(
            select(Orders)
            .where(Orders.order_type.in_([kb_admin.price_lst_types["constant_tattoo"],
                kb_admin.price_lst_types["shifting_tattoo"]]))
            .where(Orders.user_id == message.from_id)
        ).all()
    tattoo_order_numbers_lst = []
    for order in orders:
        tattoo_order_numbers_lst.append(
            f'{order.order_number} "{order.order_name}" —Å—Ç–∞—Ç—É—Å: {order.order_state}'
        )
    if message.text in tattoo_order_numbers_lst:
        async with state.proxy() as data:
            data["tattoo_order_number"] = message.text.split()[0]
            data['current_order_status'] = message.text.split()[3]
        await FSM_Admin_tattoo_order_change_status.next()

        await bot.send_message(message.from_id, MSG_SEND_ORDER_STATE_INFO)
        
        kb_new_status = ReplyKeyboardMarkup(resize_keyboard=True)
        for status in status_distribution[message.text.split()[3]] + list(STATES['closed'].values()):
            kb_new_status.add(KeyboardButton(status))
        
        await bot.send_message(
            message.from_id, f"–ö–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –≤—ã—Å—Ç–∞–≤–ª—è–µ–º?", reply_markup=kb_new_status,
        )

    elif message.text in LIST_BACK_TO_HOME + LIST_BACK_COMMANDS:
        await state.finish()
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )

    else:
        await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)


async def complete_new_status_for_tattoo_order(
    message: types.Message, state: FSMContext
):
    '''   
        –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:
        0 - –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è 
        1 - –æ—Ç—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –¥–µ–π—Å—Ç–≤–∏–∏
        2 - –ø—Ä–æ—Å–∏–º –¥–æ–±–∞–≤–∏—Ç—å —á–µ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        3 - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
        4 - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        
            ------------------------------------------
            –ë—ã–ª         –°—Ç–∞–ª         –î–µ–π—Å—Ç–≤–∏–µ
            "–û—Ç–∫—Ä—ã—Ç": "–û—Ç–∫—Ä—ã—Ç"          0
            "–û—Ç–∫—Ä—ã—Ç"  "–û–±—Ä–∞–±–æ—Ç–∞–Ω"       1, 2
            "–û—Ç–∫—Ä—ã—Ç": "–û—Ç–∫–ª–æ–Ω–µ–Ω"        1
            "–û—Ç–∫—Ä—ã—Ç": "–û—Ç–ª–æ–∂–µ–Ω"         1
            "–û—Ç–∫—Ä—ã—Ç": "–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω"     1
            ------------------------------------------
            –û–±—Ä–∞–±–æ—Ç–∞–Ω   –û—Ç–∫—Ä—ã—Ç          1
            –û–±—Ä–∞–±–æ—Ç–∞–Ω   –û–±—Ä–∞–±–æ—Ç–∞–Ω       0
            –û–±—Ä–∞–±–æ—Ç–∞–Ω   –û–ø–ª–∞—á–µ–Ω         1
            –û–±—Ä–∞–±–æ—Ç–∞–Ω   –û—Ç–∫–ª–æ–Ω–µ–Ω
            –û–±—Ä–∞–±–æ—Ç–∞–Ω   –û—Ç–ª–æ–∂–µ–Ω
            –û–±—Ä–∞–±–æ—Ç–∞–Ω   –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω
            ------------------------------------------
            –û–ø–ª–∞—á–µ–Ω   –û—Ç–∫—Ä—ã—Ç          1
            –û–ø–ª–∞—á–µ–Ω   –û–±—Ä–∞–±–æ—Ç–∞–Ω       0
            –û–ø–ª–∞—á–µ–Ω   –û–ø–ª–∞—á–µ–Ω         1
            –û–ø–ª–∞—á–µ–Ω   –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            –û–ø–ª–∞—á–µ–Ω   –í—ã–ø–æ–ª–Ω–µ–Ω
            –û–ø–ª–∞—á–µ–Ω   –û—Ç–∫–ª–æ–Ω–µ–Ω
            –û–ø–ª–∞—á–µ–Ω   –û—Ç–ª–æ–∂–µ–Ω
            –û–ø–ª–∞—á–µ–Ω   –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω
    '''
    async with state.proxy() as data:
        current_order_status = data['current_order_status']
        
    if message.text in status_distribution[current_order_status]:
        with Session(engine) as session:
            order = session.scalars(
                select(Orders).where(Orders.order_number == order_number)
            ).one()
            username = order.username
            user_id = order.user_id
            order.order_state = message.text
            schedule_id = order.schedule_id
            session.commit()

        async with state.proxy() as data:
            order_number = data["tattoo_order_number"]
            data["new_state"] = message.text
            new_state = message.text
            current_order_status = data['current_order_status']    
            
        if message.text in list(STATES["closed"].values()):
            with Session(engine) as session:
                schedule = session.get(ScheduleCalendar, schedule_id)
                schedule.status = "–°–≤–æ–±–æ–¥–µ–Ω"
                session.commit()
                
            await message.reply("–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞?", 
                reply_markup=kb_client.kb_yes_no)
            
        elif message.text in [STATES["paid"]]:  # '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
            await FSM_Admin_tattoo_order_change_status.next()
            await message.reply(
                f"–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á–µ–∫ –∫ –∑–∞–∫–∞–∑—É?", reply_markup=kb_client.kb_yes_no
            )
        elif message.text == kb_client.yes_str:
            await bot.send_message(user_id, 
                (
                    f"‚ùï –£–≤–∞–∂–∞–µ–º—ã–π {username}!\n"
                    f"‚ùï –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å '{current_order_status}' –Ω–∞ '{new_state}'.\n"
                    f"–ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ "
                    "@dara_redwan (https://t.me/dara_redwan)"
                )
            )
            
        elif message.text == kb_client.no_str:
            await message.reply(
                f'‚ùï –ì–æ—Ç–æ–≤–æ! –í—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_number} –Ω–∞ "{new_state}"',
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
            await state.finish()  #  –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ


async def get_answer_for_getting_check_document(
    message: types.Message, state: FSMContext
):
    if message.text == kb_client.yes_str:
        await FSM_Admin_tattoo_order_change_status.next()
        await message.reply(
            f"–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —á–µ–∫?", reply_markup=kb_admin.kb_price
        )

    elif message.text == kb_client.no_str:
        async with state.proxy() as data:
            tattoo_order_number = data["tattoo_order_number"]
            new_state = data["new_state"]

        await message.reply(
            f"–ì–æ—Ç–æ–≤–æ! –í—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {tattoo_order_number} –Ω–∞ '{new_state}'",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()
    else:
        await message.reply(
            f"–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'. –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
            reply_markup=kb_client.kb_yes_no,
        )


async def get_price_for_check_document(message: types.Message, state: FSMContext):
    if message.text in kb_admin.another_price_lst:
        await bot.send_message(
            message.from_id,
            MSG_ADMIN_SET_ANOTHER_PRICE,
            reply_markup=kb_admin.kb_another_price_full,
        )

    elif message.text.isdigit():
        async with state.proxy() as data:
            data["tattoo_order_price"] = message.text
        await FSM_Admin_tattoo_order_change_status.next() # -> get_check_document
        await message.reply(
            MSG_ADMIN_GET_CHECK_TO_ORDER,
            reply_markup=kb_client.kb_back_cancel,
        )

    elif message.text in LIST_BACK_TO_HOME + LIST_CANCEL_COMMANDS:
        await state.finish()
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )

    else:
        await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)


async def get_check_document(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        tattoo_order_number = data["tattoo_order_number"]
        price = str(data["tattoo_order_price"])

    if message.content_type == "document":
        check_doc_pdf = await check_pdf_document_payment(
            user_id=message.from_id,
            price=price,
            file_name=message.document.file_name,
            file_id=message.document.file_id,
        )

        if check_doc_pdf["result"]:
            with Session(engine) as session:
                order = session.scalars(select(Orders)
                    .where(Orders.order_number == tattoo_order_number)).one()
                new_check_item = CheckDocument(
                        order_number=tattoo_order_number, 
                        telegram_user_id=order.user_id,
                        doc= message.document.file_id,
                    )
                if order.check_document in [[], None]:
                    order.check_document = [new_check_item]
                else:
                    order.check_document.append(new_check_item)
                session.commit()
            
            await state.finish()
            await bot.send_message(
                message.from_id,
                f"üåø –ß–µ–∫ –ø–æ–¥–æ—à–µ–ª! –ó–∞–∫–∞–∑ ‚Ññ {tattoo_order_number} –æ–±—Ä–µ–ª —Å–≤–æ–π —á–µ–∫! "
                f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
        else:
            await message.reply(f"‚ùå –ß–µ–∫ –Ω–µ –ø–æ–¥–æ—à–µ–ª! {check_doc_pdf['report_msg']}")

    if message.content_type == "text":
        if message.text in LIST_BACK_TO_HOME + LIST_CANCEL_COMMANDS:
            await state.finish()
            await message.reply(
                MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
            )

        elif message.text in LIST_BACK_COMMANDS:
            await FSM_Admin_tattoo_order_change_status.previous()
            await message.reply(
                f"{MSG_CLIENT_GO_BACK}‚ùî –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —á–µ–∫?",
                reply_markup=kb_admin.kb_price,
            )

    if message.content_type == "photo":
        message.photo[0].file_id
        check_photo = await check_photo_payment(
            message=message,
            user_id=message.from_id,
            price=price,
            file_name=message.document.file_name,
            file_id=message.photo[0].file_id,
        )

        if check_photo["result"]:
            with Session(engine) as session:
                order = session.scalars(select(Orders)
                    .where(Orders.order_number == tattoo_order_number)).one()
                
                if order.check_document in [None, []]:
                    new_check_item = CheckDocument(
                            order_number=tattoo_order_number, 
                            telegram_user_id=order.user_id,
                            doc= message.photo[0].file_id,
                        )
                    order.check_document = [new_check_item]
                else:
                    order.check_document.append(new_check_item)
                session.commit()
                
            await state.finish()
            await bot.send_message(
                message.from_id,
                f"–ß–µ–∫ –ø–æ–¥–æ—à–µ–ª! –ó–∞–∫–∞–∑ ‚Ññ {tattoo_order_number} –æ–±—Ä–µ–ª —Å–≤–æ–π —á–µ–∫! "
                f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
        else:
            await message.reply(f"‚ùå –ß–µ–∫ –Ω–µ –ø–æ–¥–æ—à–µ–ª! {check_photo['report_msg']}")  # type: ignore


# ------------------------------------CHANGE TATTOO ORDER-----------------------------------
class FSM_Admin_change_tattoo_order(StatesGroup):
    tattoo_order_number = State()
    tattoo_new_state = State()
    new_start_time_session = State()
    new_end_time_session = State()
    new_photo = State()


# /–∏–∑–º–µ–Ω–∏—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑
async def command_command_change_info_tattoo_order(message: types.Message):
    if (
        message.text in ["–∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑", "/–∏–∑–º–µ–Ω–∏—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑"]
        and str(message.from_user.username) in ADMIN_NAMES
    ):  
        with Session(engine) as session:
            orders = session.scalars(
                select(Orders).where(
                    Orders.order_type.in_(
                        [
                            kb_admin.price_lst_types["constant_tattoo"],
                            kb_admin.price_lst_types["shifting_tattoo"]
                        ]
                    )
                )
            ).all()
        kb_tattoo_order_numbers = ReplyKeyboardMarkup(resize_keyboard=True)
        if orders == []:
            await message.reply(f"{MSG_NO_ORDER_IN_TABLE}")

        else:
            for order in orders:  # –≤—ã–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä–∞ —Ç–∞—Ç—É –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
                kb_tattoo_order_numbers.add(
                    KeyboardButton(f"{order.order_number} —Å—Ç–∞—Ç—É—Å: {order.order_state}")
                )
            kb_tattoo_order_numbers.add(
                KeyboardButton("–•–æ—á—É —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑")
            ).add(kb_admin.home_btn)
            await FSM_Admin_change_tattoo_order.tattoo_order_number.set()
            await message.reply(
                "–£ –∫–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∫–∞–∫—É—é-–ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
                reply_markup=kb_tattoo_order_numbers,
            )


# -------------------------------------get_tattoo_order_number-----------------------------------
async def get_tattoo_order_number(message: types.Message, state: FSMContext):
    with Session(engine) as session:
        orders = session.scalars(
            select(Orders).where(
                Orders.order_type.in_([
                            kb_admin.price_lst_types["constant_tattoo"],
                            kb_admin.price_lst_types["shifting_tattoo"]
                        ]
                    )
                )
            ).all()
    tattoo_str_list, tattoo_order_numbers = [], []
    kb_tattoo_order_numbers = ReplyKeyboardMarkup(resize_keyboard=True)
    kb_tattoo_order_numbers_with_status = ReplyKeyboardMarkup(resize_keyboard=True)

    for order in orders:
        msg_item = f"{order.order_number} —Å—Ç–∞—Ç—É—Å: {order.order_state}"
        tattoo_str_list.append(msg_item)
        tattoo_order_numbers.append(order.order_number)
        kb_tattoo_order_numbers.add(KeyboardButton(order.order_number))  # type: ignore
        kb_tattoo_order_numbers_with_status.add(KeyboardButton(msg_item))

    kb_tattoo_order_numbers.add("–û—Ç–º–µ–Ω–∞")
    kb_tattoo_order_numbers_with_status.add("–û—Ç–º–µ–Ω–∞")
    async with state.proxy() as data:
        data["menu_new_username"] = False
        data["menu_new_telegram"] = False
        data["menu_new_tattoo_name"] = False
        data["menu_new_order_note"] = False
        data["menu_new_tattoo_note"] = False
        data["orders"] = orders

    if message.text in [
        "–•–æ—á—É —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑",
        kb_admin.admin_choice_watch_order_or_change_order["admin_want_to_watch_order"],
    ]:
        await bot.send_message(
            message.from_id,
            MSG_WHICH_ADMIN_ORDER_WANT_TO_SEE,
            reply_markup=kb_tattoo_order_numbers,
        )

    elif (
        message.text
        == kb_admin.admin_choice_watch_order_or_change_order[
            "admin_want_to_change_order"
        ]
    ):
        await message.reply(
            "–£ –∫–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∫–∞–∫—É—é-–ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
            reply_markup=kb_tattoo_order_numbers_with_status,
        )

    elif message.text in tattoo_order_numbers:
        with Session(engine) as session:
            order = session.scalars(
                select(Orders).where(Orders.order_number == message.text)
            ).all()
        async with state.proxy() as data:
            data["order"] = order[0]

        await send_to_view_tattoo_order(message, order)

        await bot.send_message(
            message.from_id,
            "–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ –∑–∞–∫–∞–∑ –∏–ª–∏ —É–∂–µ —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –≤ –∑–∞–∫–∞–∑–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            #  '–•–æ—á—É –µ—â–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã','–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–∫–∞–∑–µ'
            reply_markup=kb_admin.kb_admin_choice_watch_order_or_change_order,
        )

    elif message.text in tattoo_str_list:
        async with state.proxy() as data:
            data["order_number"] = message.text.split()[0]
            with Session(engine) as session:
                order = session.scalars(
                        select(Orders)
                            .where(Orders.order_number == message.text.split()[0])
                    ).one()
            data['order'] = order
            data["telegram"] = message.from_id

        await FSM_Admin_change_tattoo_order.next()
        await bot.send_message(
            message.from_id,
            "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?",
            reply_markup=kb_admin.kb_tattoo_order_change_info_list,
        )

    elif message.text in LIST_BACK_COMMANDS:
        await message.reply(
            "–£ –∫–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∫–∞–∫—É—é-–ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
            reply_markup=kb_tattoo_order_numbers,
        )
    else:
        await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)


# ---------------------------------------get_new_state_info-----------------------------------
async def get_to_view_schedule(
    message: types.Message, state: FSMContext, schedule: list
):
    kb_schedule = ReplyKeyboardMarkup(resize_keyboard=True)
    if schedule == []:
        await bot.send_message(message.from_id, MSG_TO_NO_SCHEDULE)
        await bot.send_message(
            message.from_id,
            "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
            reply_markup=kb_admin.kb_tattoo_order_change_info_list,
        )
        await state.finish()

    else:
        kb_schedule = ReplyKeyboardMarkup(resize_keyboard=True)
        today = int(datetime.strftime(datetime.now(), "%m %Y"))
        with Session(engine) as session:
            schedule_photo = session.scalars(
                select(SchedulePhoto).where(SchedulePhoto.name == today)
            ).one()

        date_list_full_for_msg = ""
        for date in schedule:
            date_list_full_for_msg += date + "\n"
            kb_schedule.add(KeyboardButton(date))

        # .add(KeyboardButton('–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é –¥–∞—Ç—É'))
        kb_schedule.add(kb_client.back_btn).add(kb_client.cancel_btn)

        # –≤—ã–¥–∞–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω —Å–≤–æ–±–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç
        if schedule_photo == []:
            await bot.send_message(
                message.from_user.id,
                f"{MSG_MY_FREE_CALENDAR_DATES}" f"{date_list_full_for_msg}",
            )
        else:
            await bot.send_photo(
                message.from_user.id,
                schedule_photo.photo,
                f"{MSG_MY_FREE_CALENDAR_DATES}" f"{date_list_full_for_msg}",
            )

    kb_schedule.add(kb_admin.home_btn)
    await bot.send_message(
        message.from_id, "–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏", reply_markup=kb_schedule
    )


async def get_new_state_info(message: types.Message, state: FSMContext):
    with Session(engine) as session:
        schedule = session.scalars(
            select(ScheduleCalendar)
            .where(ScheduleCalendar.status.in_(["–°–≤–æ–±–æ–¥–µ–Ω"]))
            .where(ScheduleCalendar.event_type.in_(["–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ç–∞—Ç—É"]))
        ).all()
    kb_items_list = []
    for date in schedule:
        month_name = await get_month_from_number(
            int(date.start_datetime.strftime("%m")), lang="ru"
        )
        item_in_kb = f"{month_name} {date.start_datetime.strftime('%d/%m/%Y —Å %H:%M')}"\
            f" –ø–æ {date.end_datetime.strftime('%H:%M')} üóì"
        kb_items_list.append(item_in_kb)

    async with state.proxy() as data:
        data["date_free_list"] = schedule
        order_number = data["order_number"]
        order = data["order"]

    if message.text in list(kb_admin.tattoo_order_change_info_list.keys()):
        # –º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–µ–ª–∞/—Ç–∞—Ç—É

        if message.text in list(kb_admin.tattoo_order_change_photo.keys()):
            async with state.proxy() as data:
                data["photo_type"] = message.text
            for i in range(3):
                await FSM_Admin_change_tattoo_order.next()  # -> get_new_photo
            img_item = kb_admin.tattoo_order_change_info_list[message.text].split()[1][1:]
            await bot.send_message(
                message.from_id,
                f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_item}",
                reply_markup= kb_client.kb_back_cancel
            )

        elif message.text == "–¶–≤–µ—Ç —Ç–∞—Ç—É":
            await bot.send_message(
                message.from_id,
                "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±—É–¥–µ—Ç —É —Ç–∞—Ç—É?",
                reply_markup=kb_client.kb_colored_tattoo_choice,
            )

        elif message.text == "–î–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏":
            await get_to_view_schedule(message, state, kb_items_list)

        elif message.text == "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ç—É":
            async with state.proxy() as data:
                data["menu_new_tattoo_note"] = True

            await bot.send_message(
                message.from_id,
                "–£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ç—É",
                reply_markup=kb_client.kb_cancel,
            )

        elif message.text == "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞":
            async with state.proxy() as data:
                data["menu_new_order_note"] = True

            await bot.send_message(
                message.from_id,
                "–£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                reply_markup=kb_client.kb_cancel,
            )

        elif message.text == "–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏":
            await FSM_Admin_change_tattoo_order.next()  # -> process_hour_timepicker_start_session
            await bot.send_message(
                message.from_id,
                "–£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏",
                reply_markup=await FullTimePicker().start_picker(),
            )

        elif message.text == "–ò–º—è —Ç–∞—Ç—É":
            async with state.proxy() as data:
                data["menu_new_tattoo_name"] = True

            await bot.send_message(
                message.from_id,
                "–£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –∏–º—è —Ç–∞—Ç—É",
                reply_markup=kb_client.kb_cancel,
            )

        elif message.text == "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            async with state.proxy() as data:
                data["menu_new_username"] = True

            await bot.send_message(
                message.from_id,
                "–£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=kb_client.kb_cancel,
            )

        elif message.text == "–¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            async with state.proxy() as data:
                data["menu_new_telegram"] = True
            await bot.send_message(
                message.from_id,
                "–£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=kb_client.kb_cancel,
            )

        elif message.text == "–ú–µ—Å—Ç–æ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –¥–ª—è —Ç–∞—Ç—É":
            await bot.send_message(
                message.from_id,
                "–£–∫–∞–∂–∏ –Ω–æ–≤—É—é —á–∞—Å—Ç—å —Ç–µ–ª–∞",
                reply_markup=kb_client.kb_place_for_tattoo,
            )

        elif message.text == "–¶–µ–Ω–∞":
            await bot.send_message(
                message.from_id,
                "–£–∫–∞–∂–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É",
                reply_markup=kb_admin.kb_price,
            )

        elif message.text == "–¢–∏–ø —Ç–∞—Ç—É":  #! –ê –º—ã –≤–æ–æ–±—â–µ –º–µ–Ω—è–µ–º —Ç—É—Ç "—Ç–∏–ø —Ç–∞—Ç—É"?
            await bot.send_message(
                message.from_id,
                "–£–∫–∞–∂–∏ —Ç–∏–ø —Ç–∞—Ç—É",
                reply_markup=kb_client.kb_client_choice_main_or_temporary_tattoo,
            )

    elif message.text in kb_admin.another_price_lst:
        await bot.send_message(
            message.from_id,
            MSG_ADMIN_SET_ANOTHER_PRICE,
            reply_markup=kb_admin.kb_another_price_full,
        )

    elif (
        message.text in kb_admin.price_lst + kb_admin.another_price_full_lst
    ):  # –º–µ–Ω—è–µ–º —Ü–µ–Ω—É
        with Session(engine) as session:
            order = session.scalars(
                select(Orders).where(Orders.order_number == order_number)
            ).one()
            order.price = message.text
            session.commit()
        # await update_info('tattoo_orders', 'tattoo_order_number', order_number, 'price', message.text)

        await bot.send_message(
            message.from_id,
            f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ü–µ–Ω—É –Ω–∞ {message.text} \n\n"
            f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()
    # –º–µ–Ω—è–µ–º —Ç–∏–ø —Ç–∞—Ç—É –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ
    elif message.text == kb_client.choice_main_or_temporary_tattoo["main_tattoo"]:
        with Session(engine) as session:
            order = session.scalars(
                select(Orders).where(Orders.order_number == order_number)
            ).one()
            order.order_type = message.text[:-2].lower()
            session.commit()

        await bot.send_message(
            message.from_id,
            f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ç–∏–ø —Ç–∞—Ç—É –Ω–∞ {message.text}! –ù—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏",
        )

        await get_to_view_schedule(message, state, kb_items_list)

    # –º–µ–Ω—è–µ–º —Ç–∏–ø —Ç–∞—Ç—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–Ω–æ–µ
    elif message.text == kb_client.choice_main_or_temporary_tattoo["temporary_tattoo"]:
        await bot.send_message(
            message.from_id,
            "–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∞—Ç—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–Ω–æ–µ, "
            "—Ç–æ –∑–∞–Ω—è—Ç—ã–π –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º.",
        )

        with Session(engine) as session:
            order = session.scalars(
                select(Orders).where(Orders.order_number == order_number)
            ).one()
            schedule_to_change = session.scalars(
                select(ScheduleCalendar).where(ScheduleCalendar.id == order.schedule_id)
            ).one()
            order.order_type = message.text
            order.schedule_id.remove(schedule_to_change.id)

            async with state.proxy() as data:
                data["schedule_to_change"] = schedule_to_change
            # TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            schedule_to_change.status = "–°–≤–æ–±–æ–¥–µ–Ω"
            session.commit()

        await bot.send_message(
            message.from_id,
            f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —É –∑–∞–∫–∞–∑–∞ {order.order_number} —Ç–∏–ø —Ç–∞—Ç—É –Ω–∞ {message.text}!",
        )

        await bot.send_message(
            message.from_id,
            f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )

    # –º–µ–Ω—è–µ–º —á–∞—Å—Ç—å —Ç–µ–ª–∞
    elif message.text in kb_client.tattoo_body_places:
        with Session(engine) as session:
            order = session.scalars(
                select(Orders).where(Orders.order_number == order_number)
            ).one()
            order.bodyplace = message.text
            session.commit()

        await bot.send_message(
            message.from_id,
            f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ü–µ–Ω—É –Ω–∞ {message.text} \n\n{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()

    # –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
    elif message.text in kb_client.colored_tattoo_choice:
        with Session(engine) as session:
            order = session.scalars(
                select(Orders).where(Orders.order_number == order_number)
            ).one()
            order.colored = message.text.split()[0].lower()
            session.commit()

        await bot.send_message(
            message.from_id,
            f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ü–≤–µ—Ç –Ω–∞ {message.text} \n\n{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()

    elif message.text == kb_client.tattoo_body_places[-2]:  # –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ üôÖ‚Äç‚ôÇÔ∏è
        async with state.proxy() as data:
            data["menu_new_another_bodyplace"] = True

        await bot.send_message(
            message.from_id,
            "–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–∞—Ç—É –Ω–∞ —Ç–µ–ª–µ",
            reply_markup=kb_client.kb_cancel,
        )
    # elif message.text == kb_client.tattoo_body_places[-1]:

    elif message.text in kb_items_list:
        async with state.proxy() as data:
            data["date_meeting"] = message.text.split()[1]
            data["start_date_time"] = message.text.split()[3]
            data["end_date_time"] = message.text.split()[5]

            for event in data["date_free_list"]:
                if (
                    event[3] == message.text.split()[1]
                    and event[1] == message.text.split()[3]
                ):
                    data["schedule_id"] = event[0]

            with Session(engine) as session:
                order = session.scalars(
                    select(Orders).where(Orders.order_number == order_number)
                ).one()
                order.schedule_id.append(data["schedule_id"])
                session.commit()

                schedule_to_change = session.scalars(
                    select(ScheduleCalendar).where(
                        ScheduleCalendar.id == data["schedule_id"]
                    )
                ).one()

                schedule_to_change.status = "–ó–∞–Ω—è—Ç"
                session.commit()

        await bot.send_message(
            message.from_id,
            f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ {message.text} \n\n"
            f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()

    else:
        async with state.proxy() as data:
            menu_new_username = data["menu_new_username"]
            menu_new_telegram = data["menu_new_telegram"]
            menu_new_tattoo_name = data["menu_new_tattoo_name"]
            menu_new_order_note = data["menu_new_order_note"]
            menu_new_tattoo_note = data["menu_new_tattoo_note"]
        if menu_new_username:
            with Session(engine) as session:
                order = session.scalars(
                    select(Orders).where(Orders.order_number == order_number)
                ).one()
                order.username = message.text
                session.commit()
            # await update_info('tattoo_orders', 'tattoo_order_number', order_number, 'username', message.text)
            await bot.send_message(
                message.from_id, f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {message.text}"
            )
            await bot.send_message(
                message.from_id,
                f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
            await state.finish()

        elif menu_new_telegram:
            with Session(engine) as session:
                order = session.scalars(
                    select(Orders).where(Orders.order_number == order_number)
                ).one()
                order.user_id = message.text
                session.commit()

            await bot.send_message(
                message.from_id,
                f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {message.text} \n\n"
                f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
            await state.finish()

        elif menu_new_tattoo_name:
            with Session(engine) as session:
                order = session.scalars(
                    select(Orders).where(Orders.order_number == order_number)
                ).one()
                order.order_name = message.text
                session.commit()
            await bot.send_message(
                message.from_id,
                f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∏–º—è —Ç–∞—Ç—É –Ω–∞ {message.text} \n\n"
                f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
            await state.finish()

        elif menu_new_order_note:
            with Session(engine) as session:
                order = session.scalars(
                    select(Orders).where(Orders.order_number == order_number)
                ).one()
                order.order_note = message.text
                session.commit()
            await bot.send_message(
                message.from_id,
                f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–∞—Ç—É –Ω–∞ {message.text} \n\n"
                f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
            await state.finish()

        elif menu_new_tattoo_note:
            with Session(engine) as session:
                order = session.scalars(
                    select(Orders).where(Orders.order_number == order_number)
                ).one()
                order.tattoo_note = message.text
                session.commit()
            await bot.send_message(
                message.from_id,
                f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ç—É –Ω–∞ {message.text} \n\n"
                f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
                reply_markup=kb_admin.kb_tattoo_order_commands,
            )
            await state.finish()
        else:
            await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)


@dp.callback_query_handler(
    full_timep_callback.filter(),
    state=FSM_Admin_change_tattoo_order.new_start_time_session,
)
async def process_hour_timepicker_start_session(
    callback_query: CallbackQuery, callback_data: dict, state: FSMContext
):
    r = await FullTimePicker().process_selection(callback_query, callback_data)  # type: ignore
    if r.selected:
        """await callback_query.message.edit_text(
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞ —Ç–∞—Ç—É –≤ {r.time.strftime("%H:%M")} ',
        )"""
        # await callback_query.message.delete_reply_markup()
        async with state.proxy() as data:
            data["start_date_time"] = r.time.strftime("%H:%M")
            user_id = data["telegram"]

        await FSM_Admin_change_tattoo_order.next()  # -> process_hour_timepicker_end_session
        await bot.send_message(
            user_id,
            f'üìÖ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞ {r.time.strftime("%H:%M")}.',
        )
        await bot.send_message(
            user_id,
            "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —Å–µ–∞–Ω—Å–∞",
            reply_markup=await FullTimePicker().start_picker(),
        )


@dp.callback_query_handler(
    full_timep_callback.filter(),
    state=FSM_Admin_change_tattoo_order.new_end_time_session,
)
async def process_hour_timepicker_end_session(
    callback_query: CallbackQuery, callback_data: dict, state: FSMContext
):
    r = await FullTimePicker().process_selection(callback_query, callback_data)  # type: ignore
    if r.selected:
        """await callback_query.message.edit_text(
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Ü–∞ —Å–µ–∞–Ω—Å–∞ —Ç–∞—Ç—É –≤ {r.time.strftime("%H:%M")} ',
        )"""
        async with state.proxy() as data:
            data["end_date_time"] = r.time.strftime("%H:%M")
            schedule_id = data["schedule_id"]
            user_id = data["telegram"]
            with Session(engine) as session:
                schedule = session.get(ScheduleCalendar, schedule_id)
                start_datetime = schedule.start_datetime
                schedule.start_datetime = datetime.strptime(
                    f"{start_datetime.strftime('%d/%m/%Y')} "
                    f"{data['start_date_time'].strftime('%H:%M')}",
                    "%d/%m/%Y %H:%M",
                )

                end_datetime = schedule.end_datetime
                schedule.end_datetime = datetime.strptime(
                    f"{end_datetime.strftime('%d/%m/%Y')} "
                    f"{r.time.strftime('%H:%M')}",
                    "%d/%m/%Y %H:%M",
                )
                session.commit()

        await bot.send_message(
            user_id,
            f'üìÖ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞ {r.time.strftime("%H:%M")}.',
        )
        await state.finish()
        await bot.send_message(
            user_id,
            f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–µ–∞–Ω—Å–∞! {MSG_DO_CLIENT_WANT_TO_DO_MORE}",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )


async def get_new_photo(message: types.Message, state: FSMContext):
    if message.content_type == "photo":
        async with state.proxy() as data:
            photo_type = data["photo_type"]
            order_number = data["order_number"]

        if photo_type == "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞—Ç—É":
            with Session(engine) as session:
                order = session.scalars(
                    select(Orders).where(Orders.order_number == order_number)
                ).one()
                new_photo_item = OrderPhoto(
                    order_number=order.order_number,
                    telegram_user_id=order.user_id,
                    photo=message.photo[0].file_id,
                )
                if order.order_photo is None:
                    order.order_photo = [new_photo_item]
                else:
                    order.order_photo.append(new_photo_item)
                    
                session.commit()

        elif photo_type == "–§–æ—Ç–æ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞":
            with Session(engine) as session:
                order = session.scalars(
                    select(Orders).where(Orders.order_number == order_number)
                ).one()
                new_body_photo_item = TattooPlacePhoto(
                    order_number=order.order_number,
                    telegram_user_id=order.user_id,
                    photo=message.photo[0].file_id,
                )
                if order.tattoo_place_photo is None:
                    order.tattoo_place_photo = [new_body_photo_item]
                else:
                    order.tattoo_place_photo.append(new_body_photo_item)
                session.commit()

        await bot.send_message(
            message.from_id,
            f"–í—ã –ø–æ–º–µ–Ω—è–ª–∏ {photo_type} \n\n" f"{MSG_DO_CLIENT_WANT_TO_DO_MORE}",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )

        await state.finish()


# ------------------------------------------CREATE TATTOO ORDER-----------------------------------
class FSM_Admin_tattoo_order(StatesGroup):
    get_tattoo_type = State()
    tattoo_choice = State()
    tattoo_name = State()
    tattoo_photo = State()
    tattoo_size = State()
    tattoo_color = State()

    schedule_for_tattoo_order_choice = State()
    new_tattoo_order_date_from_schedule = State()

    date_meeting = State()
    start_date_time = State()
    end_date_time = State()

    tattoo_note = State()
    get_body_name_state = State()
    get_body_photo_state = State()

    order_desctiption_choi—Åe = State()
    order_desctiption = State()
    tattoo_order_price = State()
    tattoo_order_state = State()
    tattoo_order_check = State()
    tattoo_order_check_next = State()
    user_name = State()


class FSM_Admin_username_info(StatesGroup):
    user_name = State()
    user_name_answer = State()
    telegram = State()
    phone = State()


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–∞—Ç—É
# @dp.message_handler(commands='–ó–∞–≥—Ä—É–∑–∏—Ç—å', state=None) #
async def command_command_create_tattoo_orders(message: types.Message):
    if (
        message.text in ["–¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑", "/–¥–æ–±–∞–≤–∏—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑"]
        and str(message.from_user.username) in ADMIN_NAMES
    ):
        await FSM_Admin_tattoo_order.get_tattoo_type.set()  # -> choice_tattoo_order_admin
        await bot.send_message(
            message.from_id,
            "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω. –°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–∞—Ç—É –∑–∞–∫–∞–∑. "
            "–¢–∞—Ç—É –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–Ω–æ–≥–æ —Ç–∞—Ç—É –∏–ª–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ?",
            reply_markup=kb_client.kb_client_choice_main_or_temporary_tattoo,
        )


async def get_tattoo_type(message: types.Message, state: FSMContext):
    if message.text in list(kb_client.choice_main_or_temporary_tattoo.values()):
        if message.text.split()[0].lower() == "–ø–µ—Ä–µ–≤–æ–¥–Ω–æ–µ":
            async with state.proxy() as data:
                data["date_meeting"] = "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—ã —Å–µ–∞–Ω—Å–∞"
                data["start_date_time"] = "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞"
                data["end_date_time"] = "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω—Ü–∞ —Å–µ–∞–Ω—Å–∞"

        async with state.proxy() as data:
            # tattoo_type = –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ, –ø–µ—Ä–µ–≤–æ–¥–Ω–æ–µ
            data["tattoo_type"] = message.text.split()[0].lower()

            data["tattoo_photo_tmp_lst"] = ""
            data["tattoo_order_photo_counter"] = 0
            data["tattoo_place_file"] = ""
            data["client_add_tattoo_place_photo"] = True

        await FSM_Admin_tattoo_order.next()  # -> choice_tattoo_order_admin
        await bot.send_message(
            message.from_id,
            "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏, —ç—Ç–æ —Ç–∞—Ç—É –∏–∑ —Ç–≤–æ–µ–π –≥–∞–ª–µ—Ä–µ–∏ –∏–ª–∏ –Ω–µ—Ç?",
            reply_markup=kb_client.kb_yes_no,
        )

    elif message.text in LIST_BACK_COMMANDS + LIST_CANCEL_COMMANDS + LIST_BACK_TO_HOME:
        await state.finish()
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )

    else:
        await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ç—É
async def choice_tattoo_order_admin(message: types.Message, state: FSMContext):
    list_kb_tattoo_items = []
    if message.text == kb_client.yes_str:
        with Session(engine) as session:
            admin_tattoo_items = session.scalars(select(TattooItems)).all()
        kb_tattoo_items_for_order = ReplyKeyboardMarkup(resize_keyboard=True)
        await bot.send_message(message.from_id, "–í–æ—Ç —Ç–≤–æ—è –≥–∞–ª–ª–µ—Ä–µ—è:")

        for tattoo in admin_tattoo_items:
            kb_tattoo_items_for_order.add(KeyboardButton(f"{tattoo.name}"))
            list_kb_tattoo_items.append(f"{tattoo.name}")
            msg = f"üìÉ –ù–∞–∑–≤–∞–Ω–∏–µ: {tattoo.name}\nüé® –¶–≤–µ—Ç: {tattoo.colored}\n"
            # \f'üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π: {tattoo[5]}\n'

            if tattoo.note.lower() != "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è":
                msg += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {tattoo.note}\n"  # üí∞ –¶–µ–Ω–∞: {tattoo[2]}\n'
            
            media = []
            for photo in tattoo.photos:
                media.append(types.InputMediaPhoto(photo.photo, msg))

            await bot.send_media_group(message.from_user.id, media=media)

        # –≤—ã–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞—Ç—É - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–≤–µ—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ
        await bot.send_message(
            message.from_id,
            "‚ùî –ö–∞–∫–æ–µ —Ç–∞—Ç—É —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?",
            reply_markup=kb_tattoo_items_for_order,
        )

    elif message.text in list_kb_tattoo_items:
        with Session(engine) as session:
            tattoo = session.scalars(select(TattooItems)
                .where(TattooItems.name == message.text)).one()
        async with state.proxy() as data:
            data["telegram"] = message.from_user.id
            data["tattoo_name"] = message.text
            data["price"] = tattoo.price
            data["tattoo_photo_tmp_lst"] = tattoo.photos 
            data["colored"] = tattoo.colored
            data["tattoo_note"] = tattoo.note  
            data["tattoo_from_galery"] = True
        for i in range(3):
            await FSM_Admin_tattoo_order.next()  # -> tattoo_size

        await bot.send_message(
            message.from_id,
            "–í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä —Ç–∞—Ç—É (–≤ —Å–º). –†–∞–∑–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 150 —Å–º2 –∏ –º–µ–Ω—å—à–µ 0",
            reply_markup=kb_client.kb_client_size_tattoo,
        )

    elif message.text == kb_client.no_str:
        await FSM_Admin_tattoo_order.next()  # -> load_tattoo_order_name
        async with state.proxy() as data:
            data["tattoo_from_galery"] = False

        await bot.send_message(
            message.from_id,
            "–•–æ—Ä–æ—à–æ. –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–∞—Ç—É. –ö–∞–∫–æ–µ –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ?",
            reply_markup=kb_client.kb_cancel,
        )

    elif message.text in LIST_CANCEL_COMMANDS + LIST_BACK_TO_HOME:
        await state.finish()
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )

    else:
        await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)


async def load_tattoo_order_name(message: types.Message, state: FSMContext):
    if message.text in LIST_CANCEL_COMMANDS + LIST_BACK_TO_HOME:
        await state.finish()
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )

    elif message.text == kb_client.yes_str:
        await FSM_Admin_tattoo_order.next()  # -> load_tattoo_order_photo
        await message.reply(MSG_CLIENT_LOAD_PHOTO, reply_markup=kb_client.kb_cancel)

    elif message.text == kb_client.no_str:
        for i in range(2):
            await FSM_Admin_tattoo_order.next()  # -> load_tattoo_order_size
        await bot.send_message(
            message.from_id, "–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–∏–º –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –±–µ–∑ —ç—Å–∫–∏–∑–∞"
        )

        await bot.send_message(
            message.from_id,
            MSG_CLIENT_CHOICE_TATTOO_SIZE,
            reply_markup=kb_client.kb_client_size_tattoo,
        )

    else:
        async with state.proxy() as data:
            # —Å—Ç–∞–≤–∏–º —Å—é–¥–∞ id —Ç–µ–ª–µ–≥–∏, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã
            data["telegram"] = message.from_user.id
            data["tattoo_name"] = message.text

        await bot.send_message(message.from_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ç—É –±—É–¥–µ—Ç {message.text}")
        await bot.send_message(
            message.from_id,
            f"–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —ç—Å–∫–∏–∑–∞ —Ç–∞—Ç—É?",
            reply_markup=kb_client.kb_yes_no,
        )


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
async def load_tattoo_order_photo(message: types.Message, state: FSMContext):
    if message.content_type == "text":
        if (
            message.text
            in LIST_BACK_COMMANDS + LIST_CANCEL_COMMANDS + LIST_BACK_TO_HOME
        ):
            await state.finish()
            await message.reply(
                MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
            )

        elif message.text in [
            kb_client.no_photo_in_tattoo_order["load_tattoo_photo"],
            kb_client.client_choice_add_another_photo_to_tattoo_order[
                "client_want_to_add_sketch_to_tattoo_order"
            ],
        ]:
            async with state.proxy() as data:
                data["tattoo_order_photo_counter"] = 0

            await bot.send_message(
                message.from_id,
                MSG_CLIENT_LOAD_PHOTO,
                reply_markup=kb_client.kb_back_cancel,
            )

        #'–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚û°Ô∏è'
        elif (
            message.text
            == kb_client.client_choice_add_another_photo_to_tattoo_order[
                "client_dont_want_to_add_sketch_to_tattoo_order"
            ]
        ):
            await FSM_Admin_tattoo_order.next()  # -> load_tattoo_order_size
            await bot.send_message(
                message.from_id,
                "‚ùï –•–æ—Ä–æ—à–æ, —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è —ç—Å–∫–∏–∑–∞ –º—ã –ø–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏.",
            )
            await bot.send_message(
                message.from_id,
                f"{MSG_CLIENT_CHOICE_TATTOO_SIZE}",
                reply_markup=kb_client.kb_client_size_tattoo,
            )
        else:
            await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)

    elif message.content_type == "photo":
        async with state.proxy() as data:
            data["tattoo_from_galery"] = False
            data["tattoo_photo_tmp_lst"] += f"{message.photo[0].file_id}|"
            tattoo_order_photo_counter = data["tattoo_order_photo_counter"]
            data["tattoo_order_photo_counter"] = message.media_group_id

        if tattoo_order_photo_counter != data["tattoo_order_photo_counter"]:
            async with state.proxy() as data:
                tattoo_order_photo_counter = data["tattoo_order_photo_counter"]

            await bot.send_message(
                message.from_id,
                "üì∑ –û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª(–∞) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —ç—Å–∫–∏–∑–∞ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ç–∞—Ç—É!",
            )
            await bot.send_message(
                message.from_id,
                "‚ùî –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ/–∫–∞—Ä—Ç–∏–Ω–∫—É?",
                reply_markup=kb_client.kb_client_choice_add_another_photo_to_tattoo_order,
            )


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–∞—Ç—É
async def load_tattoo_order_size(message: types.Message, state: FSMContext):
    if message.text in list(kb_client.size_dict.values()):
        async with state.proxy() as data:
            data["tattoo_size"] = message.text
            data["tattoo_place_file_counter"] = 0
            data["tattoo_place_video_note"] = ""
            data["tattoo_place_video"] = ""
            tattoo_from_galery = data["tattoo_from_galery"]
            tattoo_type = data["tattoo_type"]

        if tattoo_from_galery and tattoo_type.lower() == "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ":
            for i in range(2):
                await FSM_Admin_tattoo_order.next()  # -> load_tattoo_order_schedule_choice

            # ['–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', '–•–æ—á—É –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å']
            await message.reply(
                "–•–æ—Ä–æ—à–æ, –∞ —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏–ª–∏ –¥–∞—Ç—ã —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞."
                " –•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –∑–∞–∫–∞–∑?",
                reply_markup=kb_admin.kb_schedule_for_tattoo_order_choice,
            )  # await DialogCalendar().start_calendar()

        else:
            await FSM_Admin_tattoo_order.next()  # -> get_tattoo_color
            await bot.send_message(
                message.from_id,
                MSG_WHICH_COLOR_WILL_BE_TATTOO,
                reply_markup=kb_client.kb_colored_tattoo_choice,
            )

    elif message.text in LIST_CANCEL_COMMANDS + LIST_BACK_TO_HOME:
        await state.finish()
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )

    else:
        await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)


async def get_tattoo_color(message: types.Message, state: FSMContext):
    if any(text in message.text for text in kb_client.colored_tattoo_choice):
        async with state.proxy() as data:
            data["tattoo_colored"] = message.text.split()[0]
            tattoo_type = data["tattoo_type"]

        await bot.send_message(
            message.from_id, f"üçÉ –•–æ—Ä–æ—à–æ, —Ç–∞—Ç—É –±—É–¥–µ—Ç {message.text.split()[0].lower()}"
        )

        if tattoo_type.lower() == "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ":
            await FSM_Admin_tattoo_order.next()  # -> load_tattoo_order_schedule_choice

            # ['–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', '–•–æ—á—É –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å']
            await message.reply(
                "–•–æ—Ä–æ—à–æ, –∞ —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏–ª–∏ –¥–∞—Ç—ã —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞."
                " –•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –∑–∞–∫–∞–∑?",
                reply_markup=kb_admin.kb_schedule_for_tattoo_order_choice,
            )
        else:
            for i in range(6):
                await FSM_Admin_tattoo_order.next()  # -> load_tattoo_order_note

            await bot.send_message(
                message.from_id,
                '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ–± —ç—Ç–æ–º —Ç–∞—Ç—É. –¢–∞–∫ —Ç—ã –¥–æ–±–∞–≤–∏—à—å –ø–∞—Ä–∞–º–µ—Ç—Ä "–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ç—É"',
                reply_markup=kb_client.kb_cancel,
            )

    elif message.text in LIST_CANCEL_COMMANDS + LIST_BACK_TO_HOME:
        await state.finish()
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )

    else:
        await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)


async def load_tattoo_order_schedule_choice(message: types.Message, state: FSMContext):
    if message.text == "–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è":
        with Session(engine) as session:
            schedule = session.scalars(
                select(ScheduleCalendar)
                .where(ScheduleCalendar.status == "–°–≤–æ–±–æ–¥–µ–Ω")
                .where(ScheduleCalendar.event_type == "—Ç–∞—Ç—É –∑–∞–∫–∞–∑")
                .order_by(ScheduleCalendar.start_datetime)
            )

        if schedule == []:
            await message.reply(
                f"–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –¢–æ–≥–¥–∞ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É",
                reply_markup=await DialogCalendar().start_calendar(),
            )

            for i in range(2):
                await FSM_Admin_tattoo_order.next()  # -> load_datemiting
        else:
            async with state.proxy() as data:
                data["date_free_list"] = schedule
            kb_date_schedule = ReplyKeyboardMarkup(resize_keyboard=True)
            date_list = ""
            for date in schedule:
                if "/" in date[3]:
                    date_time = datetime.strptime(
                        f"{date[3]} 00:00", "%d/%m/%Y %H:%M"
                    )

                    if date_time >= datetime.now():
                        date_list += f"{date[4]} {date[3]} c {date[1]} –ø–æ {date[2]}\n"
                        kb_date_schedule.add(
                            KeyboardButton(
                                f"{date[4]} {date[3]} c {date[1]} –ø–æ {date[2]}"
                            )
                        )
                else:
                    dates = await get_dates_from_month_and_day_of_week(
                        month=date[4], day=date[3]
                    )
                    if dates != []:
                        date_list += f"{date[4]} {date[3]} c {date[1]} –ø–æ {date[2]}\n"
                        kb_date_schedule.add(
                            KeyboardButton(
                                f"{date[4]} {date[3]} c {date[1]} –ø–æ {date[2]}"
                            )
                        )
            kb_date_schedule.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
            month_today = int(datetime.strftime(datetime.now(), "%m"))
            year_today = int(datetime.strftime(datetime.now(), "%Y"))
            with Session(engine) as session:
                schedule_photo = session.scalars(select(SchedulePhoto)
                    .where(SchedulePhoto.name == f"{month_today} {year_today}")).all()
            await FSM_Admin_tattoo_order.next()  # -> load_new_tattoo_order_date_from_schedule

            if schedule_photo != []:
                await bot.send_photo(
                    message.from_user.id,
                    list(schedule_photo[0])[1],
                    f"–í–æ—Ç —Ç–≤–æ–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n{date_list}"
                    "–ö–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞–µ—à—å?",
                    reply_markup=kb_date_schedule,
                )

            else:
                await bot.send_message(
                    message.from_user.id,
                    f"–í–æ—Ç —Ç–≤–æ–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n{date_list}"
                    "–ö–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞–µ—à—å?",
                    reply_markup=kb_date_schedule,
                )

    elif message.text == "–•–æ—á—É –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å":
        for i in range(2):
            await FSM_Admin_tattoo_order.next()  # -> load_datemiting
        await message.reply(
            f"–¢–æ–≥–¥–∞ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤—É—é –¥–∞—Ç—É",
            reply_markup=await DialogCalendar().start_calendar(),
        )
    else:
        await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")


async def load_new_tattoo_order_date_from_schedule(
    message: types.Message, state: FSMContext
):
    async with state.proxy() as data:
        data["date_meeting"] = message.text.split()[1]
        data["start_date_time"] = message.text.split()[3]
        data["end_date_time"] = message.text.split()[5]
        data["schedule_id"] = 0

        for event in data["date_free_list"]:
            if (
                event[3] == message.text.split()[1]
                and event[1] == message.text.split()[3]
            ):
                data["schedule_id"] = event[0]

        for i in range(4):
            await FSM_Admin_tattoo_order.next()
        await message.reply(
            f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {message.text.split()[1]} –∏ –≤—Ä–µ–º—è {message.text.split()[3]}.\n"
            "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–≤–æ–µ–º —Ç–∞—Ç—É"
        )


# –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(
    dialog_cal_callback.filter(), state=FSM_Admin_tattoo_order.date_meeting
)
async def load_datemiting(
    callback_query: CallbackQuery, callback_data: dict, state: FSMContext
):
    selected, date = await DialogCalendar().process_selection(callback_query, callback_data)  # type: ignore
    if selected:
        await callback_query.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {date.strftime("%d/%m/%Y")}')
        username_id = 0
        async with state.proxy() as data:
            username_id = data["telegram"]

        if date <= datetime.now():
            await bot.send_message(
                username_id,
                "–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                reply_markup=await DialogCalendar().start_calendar(),
            )

        else:
            async with state.proxy() as data:
                data['date'] = date
                data["date_meeting"] = f'{date.strftime("%d/%m/%Y")}'  #  message.text
                data["month_number"] = int(f'{date.strftime("%m")}')
                data["month_name"] = await get_month_from_number(
                    data["month_number"], "ru"
                )

            await FSM_Admin_tattoo_order.next()
            await bot.send_message(
                username_id,
                "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —É–¥–æ–±–Ω–æ–µ –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è.",
                reply_markup=await FullTimePicker().start_picker(),
            )


# –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(
    full_timep_callback.filter(), state=FSM_Admin_tattoo_order.start_date_time
)
async def process_hour_timepicker_start(
    callback_query: CallbackQuery, callback_data: dict, state: FSMContext
):
    r = await FullTimePicker().process_selection(callback_query, callback_data)  # type: ignore
    if r.selected:
        await callback_query.message.edit_text(
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ {r.time.strftime("%H:%M")} ',
        )
        # await callback_query.message.delete_reply_markup()
        username_id = 0
        async with state.proxy() as data:
            data["start_date_time"] = r.time.strftime("%H:%M")
            username_id = data["telegram"]

        await FSM_Admin_tattoo_order.next()
        await bot.send_message(
            username_id,
            "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞",
            reply_markup=await FullTimePicker().start_picker(),
        )


# –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(
    full_timep_callback.filter(), state=FSM_Admin_tattoo_order.end_date_time
)
async def process_hour_timepicker_end(
    callback_query: CallbackQuery, callback_data: dict, state: FSMContext
):
    r = await FullTimePicker().process_selection(callback_query, callback_data)  # type: ignore
    if r.selected:
        await callback_query.message.edit_text(
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –∑–∞–∫–∞–∑–∞ —Ç–∞—Ç—É –≤ {r.time.strftime("%H:%M")} ',
        )
        # await callback_query.message.delete_reply_markup()
        username_id = 0
        async with state.proxy() as data:
            data["end_date_time"] = r.time.strftime("%H:%M")
            username_id = data["telegram"]
            schedule_id = await generate_random_order_number(CODE_LENTH)
            data["schedule_id"] = schedule_id

            with Session(engine) as session:
                new_schedule_event = ScheduleCalendar(
                    start_datetime = datetime.strptime(
                        f"{data['date']} {data['start_time']}", "%d/%m/%Y %H:%M"
                    ),
                    end_datetime= datetime.strptime(
                        f"{data['date']} {r.time.strftime('%H:%M')}", "%d/%m/%Y %H:%M"
                    ),
                    status = '–ó–∞–Ω—è—Ç', 
                    event_type = '—Ç–∞—Ç—É –∑–∞–∫–∞–∑'
                )
                session.add(new_schedule_event)
                session.commit()

        await FSM_Admin_tattoo_order.next()  # -> load_tattoo_order_note
        await bot.send_message(
            username_id,
            '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ–± —ç—Ç–æ–º —Ç–∞—Ç—É. –¢–∞–∫ —Ç—ã –¥–æ–±–∞–≤–∏—à—å –ø–∞—Ä–∞–º–µ—Ç—Ä "–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ç—É"',
            reply_markup=kb_client.kb_cancel,
        )


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ç—É
async def load_tattoo_order_note(message: types.Message, state: FSMContext):
    if message.text in LIST_BACK_COMMANDS + LIST_BACK_TO_HOME + LIST_CANCEL_COMMANDS:
        await state.finish()
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )
    else:
        async with state.proxy() as data:
            data["tattoo_note"] = message.text
        await FSM_Admin_tattoo_order.next()
        await bot.send_message(
            message.from_id,
            "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–∞, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ —Ç–∞—Ç—É?",
            reply_markup=kb_client.kb_yes_no,
        )


async def get_body_name(message: types.Message, state: FSMContext):
    if message.text == kb_client.yes_str:
        await bot.send_message(
            message.from_id,
            "–ö–∞–∫–æ–µ –º–µ—Å—Ç–æ –±—É–¥–µ—Ç —É —Ç–∞—Ç—É?",
            reply_markup=kb_client.kb_place_for_tattoo,
        )

    elif message.text == kb_client.no_str:
        async with state.proxy() as data:
            data["tattoo_body_place"] = "–ë–µ–∑ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–∞—Ç—É"
            data["tattoo_place_file"] = ""

        for i in range(2):
            await FSM_Admin_tattoo_order.next()  # -> choi—Åe_tattoo_order_desctiption
        await message.reply(
            '–•–æ—á–µ—à—å —á–µ–≥–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –æ–ø–∏—Å–∞–Ω–∏—é —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞?\n–û—Ç–≤–µ—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç"',
            reply_markup=kb_client.kb_yes_no,
        )

    elif message.text in LIST_BACK_COMMANDS + LIST_BACK_TO_HOME + LIST_CANCEL_COMMANDS:
        await state.finish()
        await message.reply(
            MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
        )

    elif message.text in kb_client.tattoo_body_places:
        async with state.proxy() as data:
            data["tattoo_body_place"] = message.text

        await FSM_Admin_tattoo_order.next()
        await bot.send_message(
            message.from_id,
            "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è?",
            reply_markup=kb_client.kb_yes_no,
        )


async def get_body_photo(message: types.Message, state: FSMContext):
    if message.content_type == "text":
        if message.text == kb_client.yes_str:
            async with state.proxy() as data:
                data["tattoo_place_file_counter"] = 0

            await bot.send_message(
                message.from_id,
                "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–∞—Ç—É",
                reply_markup=kb_client.kb_cancel,
            )

        elif message.text == kb_client.no_str:
            async with state.proxy() as data:
                data["tattoo_place_file"] = ""
                data["tattoo_place_video_note"] = ""
                data["tattoo_place_video"] = ""

            await FSM_Admin_tattoo_order.next()  # -> choi—Åe_tattoo_order_desctiption
            await message.reply(
                '–•–æ—á–µ—à—å —á–µ–≥–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –æ–ø–∏—Å–∞–Ω–∏—é —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞?\n–û—Ç–≤–µ—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç"',
                reply_markup=kb_client.kb_yes_no,
            )

        elif (
            message.text
            in LIST_BACK_COMMANDS + LIST_BACK_TO_HOME + LIST_CANCEL_COMMANDS
        ):
            await state.finish()
            await message.reply(
                MSG_BACK_TO_HOME, reply_markup=kb_admin.kb_tattoo_order_commands
            )

        elif (
            message.text
            == kb_client.client_choice_add_another_photo_to_tattoo_order[
                "client_want_to_add_sketch_to_tattoo_order"
            ]
        ):
            await bot.send_message(
                message.from_id,
                "–û—Ç–ø—Ä–∞–≤—å –µ—â–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–∞—Ç—É",
                reply_markup=kb_client.kb_cancel,
            )

        elif (
            message.text
            == kb_client.client_choice_add_another_photo_to_tattoo_order[
                "client_dont_want_to_add_sketch_to_tattoo_order"
            ]
        ):
            await FSM_Admin_tattoo_order.next()  # -> choi—Åe_tattoo_order_desctiption
            await message.reply(
                '–•–æ—á–µ—à—å —á–µ–≥–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –æ–ø–∏—Å–∞–Ω–∏—é —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞?\n–û—Ç–≤–µ—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç"',
                reply_markup=kb_client.kb_yes_no,
            )

        else:
            await message.reply(MSG_NO_CORRECT_INFO_LETS_CHOICE_FROM_LIST)

    elif message.content_type == "photo":
        async with state.proxy() as data:
            data["tattoo_place_file"] += f"{message.photo[0].file_id}|"
            data["client_add_tattoo_place_photo"] = True

            tattoo_place_file_counter = data["tattoo_place_file_counter"]
            data["tattoo_place_file_counter"] = message.media_group_id

        if tattoo_place_file_counter != data["tattoo_place_file_counter"]:
            async with state.proxy() as data:
                tattoo_place_file_counter = data["tattoo_place_file_counter"]

            await bot.send_message(
                message.from_id,
                "üì∑ –û—Ç–ª–∏—á–Ω–æ, —Ç—ã –¥–æ–±–∞–≤–∏–ª(–∞) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ—Å—Ç–∞ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ç–∞—Ç—É!",
            )

            await bot.send_message(
                message.from_id,
                MSG_CLIENT_DO_WANT_ADD_ANOTHER_PHOTO_OR_VIDEO_BODY,
                reply_markup=kb_client.kb_client_choice_add_another_photo_to_tattoo_order,
            )
            # client_choice_add_another_photo_to_tattoo_order = {
            #'client_want_to_add_sketch_to_tattoo_order' : '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚òòÔ∏è',
            #'client_dont_want_to_add_sketch_to_tattoo_order' : '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚û°Ô∏è'}

    elif message.content_type == "video_note":
        async with state.proxy() as data:
            data["tattoo_place_video_note"] += f"{message.video_note.file_id}|"

        await bot.send_message(
            message.from_id,
            "üì∑ –û—Ç–ª–∏—á–Ω–æ, —Ç—ã –¥–æ–±–∞–≤–∏–ª(–∞) –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ç–∞—Ç—É!",
        )
        await bot.send_message(
            message.from_id,
            MSG_CLIENT_DO_WANT_ADD_ANOTHER_PHOTO_OR_VIDEO_BODY,
            reply_markup=kb_client.kb_yes_no,
        )

    elif message.content_type == "video":
        async with state.proxy() as data:
            data["tattoo_place_video"] += f"{message.video.file_id}|"
            tattoo_place_file_counter = data["tattoo_place_file_counter"]
            data["tattoo_place_file_counter"] = message.media_group_id

        if tattoo_place_file_counter != data["tattoo_place_file_counter"]:
            async with state.proxy() as data:
                tattoo_place_file_counter = data["tattoo_place_file_counter"]

            await bot.send_message(
                message.from_id, "üì∑ –û—Ç–ª–∏—á–Ω–æ, —Ç—ã –¥–æ–±–∞–≤–∏–ª(–∞) –≤–∏–¥–µ–æ –º–µ—Å—Ç–∞ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ç–∞—Ç—É!"
            )

            await bot.send_message(
                message.from_id,
                MSG_CLIENT_DO_WANT_ADD_ANOTHER_PHOTO_OR_VIDEO_BODY,
                reply_markup=kb_client.kb_yes_no,
            )


async def choi—Åe_tattoo_order_desctiption(message: types.Message, state: FSMContext):
    await FSM_Admin_tattoo_order.next()
    if message.text == kb_client.yes_str:
        await message.reply("–•–æ—Ä–æ—à–æ! –û–ø–∏—à–∏ –¥–µ—Ç–∞–ª–∏ —Ç–∞—Ç—É")

    elif message.text == kb_client.no_str:
        await FSM_Admin_tattoo_order.next()
        async with state.proxy() as data:
            data["order_note"] = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"
        await message.reply(
            "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –±—É–¥–µ–º –¥—É–º–∞—Ç—å –Ω–∞–¥ –¥–µ—Ç–∞–ª—è–º–∏ —Ç–∞—Ç—É –ø–æ—Ç–æ–º. –ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞. "
            "–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
            reply_markup=kb_admin.kb_price,
        )
    else:
        await bot.send_message(
            message.from_id,
            '–ù–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ "–î–∞" –∏–ª–∏ "–ù–µ—Ç". –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.',
        )


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–∞—Ç—É
async def load_order_desctiption_after_choice(
    message: types.Message, state: FSMContext
):
    async with state.proxy() as data:
        data["order_note"] = message.text
    await FSM_Admin_tattoo_order.next()  # -> get_price_tattoo_order_after_choice
    await message.reply(
        f"–ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞. –í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
        reply_markup=kb_admin.kb_price,
    )  # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∑–∞–∫–∞–∑ –ø–æ—á—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω.


async def get_price_tattoo_order_after_choice(
    message: types.Message, state: FSMContext
):
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É tattoo_items
    async with state.proxy() as data:
        tattoo_from_galery = data["tattoo_from_galery"]
        data["tattoo_price"] = message.text
        data["tattoo_details_number"] = 0
        data["order_state"] = STATES["open"]  # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π
        data["tattoo_order_number"] = await generate_random_order_number(
            ORDER_CODE_LENTH
        )
        data["creation_date"] = datetime.now()
        if not tattoo_from_galery:
            """ new_tattoo_info = {
                "tattoo_name": data["tattoo_name"],
                "tattoo_photo": data["tattoo_photo"],
                "tattoo_price": data["tattoo_price"],
                "tattoo_size": data["tattoo_size"],
                "tattoo_note": data["tattoo_note"],
                "creator": "admin",
            }
            await set_to_table(tuple(new_tattoo_info.values()), "tattoo_items") """
            await bot.send_message(
                message.from_user.id,
                f" –û—Ç–ª–∏—á–Ω–æ! –í —Ç–∞–±–ª–∏—Ü–µ tattoo_items –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞. "
                f"–¢–∞–±–ª–∏—Ü–∞ tattoo_items —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö, "
                f"–∏ –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–æ–∑–¥–∞–ª–∞ —Å–∞–º–∞. \n",
            )

    await FSM_Admin_tattoo_order.next()  # -> get_tattoo_order_state
    await bot.send_message(
        message.from_user.id,
        '–ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑? –û—Ç–≤–µ—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç"',
        reply_markup=kb_client.kb_yes_no,
    )


async def get_tattoo_order_state(message: types.Message, state: FSMContext):
    tattoo_order_number = 0
    await FSM_Admin_tattoo_order.next()
    if message.text == kb_client.yes_str:
        async with state.proxy() as data:
            data["order_state"] = STATES["paid"]

        await bot.send_message(
            message.from_user.id,
            f' –•–æ—á–µ—à—å –ø—Ä–∏–ª–æ–∂–∏—Ç—å —á–µ–∫ –∫ –∑–∞–∫–∞–∑—É? –û—Ç–≤–µ—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç"',
            reply_markup=kb_client.kb_yes_no,
        )

    # await db_filling_from_command('tattoo_items.json', new_tattoo_info)
    elif message.text == kb_client.no_str:
        async with state.proxy() as data:
            data["order_state"] = STATES["open"]
            data["check_document"] = "–ß–µ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
            tattoo_order_number = data["tattoo_order_number"]
        for i in range(2):
            await FSM_Admin_tattoo_order.next()
        await bot.send_message(
            message.from_user.id,
            f"–ó–∞–∫–∞–∑ ‚Ññ {tattoo_order_number} –ø–æ—á—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω! "
            "–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∏–º—è, —Ç–µ–ª–µ–≥—Ä–∞–º –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!\n"
            "–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=kb_client.kb_cancel,
        )
    else:
        await bot.send_message(
            message.from_id,
            '–ù–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ "–î–∞" –∏–ª–∏ "–ù–µ—Ç". –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.',
        )


async def get_tattoo_order_check(message: types.Message, state: FSMContext):
    tattoo_order_number = 0
    if message.text == kb_client.yes_str:
        await FSM_Admin_tattoo_order.next()
        await bot.send_message(
            message.from_user.id,
            MSG_ADMIN_GET_CHECK_TO_ORDER,
        )

    elif message.text == kb_client.no_str:
        async with state.proxy() as data:
            tattoo_order_number = data["tattoo_order_number"]
            data["check_document"] = "–ß–µ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
        for i in range(2):
            await FSM_Admin_tattoo_order.next()
        await bot.send_message(
            message.from_user.id,
            f"–ó–∞–∫–∞–∑ ‚Ññ {tattoo_order_number} –ø–æ—á—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω! "
            "–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –ò–º—è, –¢–µ–ª–µ–≥—Ä–∞–º –∏ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!\n"
            "–í–≤–µ–¥–∏ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        )

    else:
        await bot.send_message(
            message.from_user.id,
            '–ù–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ "–î–∞" –∏–ª–∏ "–ù–µ—Ç". –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.',
        )


async def get_tattoo_order_check_next(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        tattoo_order_number = data["tattoo_order_number"]
        price = data["tattoo_price"]
        data["check_document"] = message.document.file_id
        check_doc_pdf = await check_photo_payment(
            message,
            message.from_id,
            price,
            message.document.file_name,
            data["check_document"],
        )

    if check_doc_pdf["result"]:
        await FSM_Admin_tattoo_order.next()
        await bot.send_message(
            message.from_user.id,
            f"–ß–µ–∫ –ø–æ–¥–æ—à–µ–ª! –ó–∞–∫–∞–∑ ‚Ññ {tattoo_order_number} –ø–æ—á—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω! "
            "–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∏–º—è, —Ç–µ–ª–µ–≥—Ä–∞–º –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!\n"
            "–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        )

    else:
        await message.reply(f"‚ùå –ß–µ–∫ –Ω–µ –ø–æ–¥–æ—à–µ–ª! {check_doc_pdf['report_msg']}")  # type: ignore


# –≤—ã–±–∏—Ä–∞–µ–º –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
async def tattoo_order_load_user_name(message: types.Message, state: FSMContext):
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É clients
    order_photo_lst = []
    tattoo_photo_lst = []
    async with state.proxy() as data:
        data["username"] = message.text
        tattoo_order_number = data["tattoo_order_number"]
        with Session(engine) as session:
            
            """
                –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –¢–∞—Ç—É - TattooItemPhoto
            """

            if data["tattoo_photo_tmp_lst"] != "":
                for photo in data["tattoo_photo_tmp_lst"].split("|"):
                    # –ø—Ä–∏ split('|') –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –µ—â–µ –æ–¥–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '', –µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å
                    if photo != "":
                        tattoo_photo_lst.append(
                            TattooItemPhoto(
                                photo=photo, tattoo_item_name=data["tattoo_name"]
                            )
                        )
                        order_photo_lst.append(
                            OrderPhoto(
                                order_number=data["tattoo_order_number"],
                                telegram_user_id=message.from_id,
                                photo=photo,
                            )
                        )
            else:
                tattoo_photo_lst.append(
                    TattooItemPhoto(photo=None, tattoo_item_name=data["tattoo_name"])
                )
            schedule_item = None
            if data["schedule_id"] not in [None, []]:
                schedule_item = [
                    ScheduleCalendarItems(
                        schedule_id=data["schedule_id"],
                        order_number=data["tattoo_order_number"],
                    )
                ]
            new_tattoo_order = Orders(
                order_type=data["tattoo_type"],
                order_name=data["tattoo_name"],
                user_id=message.from_id,
                order_photo=order_photo_lst,
                tattoo_size=data["tattoo_size"],
                tattoo_note=data["tattoo_note"],
                order_note=data["order_note"],
                order_state=data["order_state"],
                order_number=data["tattoo_order_number"],
                creation_date=data["creation_date"],
                price=data["tattoo_price"],
                check_document=data["check_document"],
                username=data["username"],
                schedule_id=schedule_item,
                colored=data["tattoo_colored"],
                # tattoo_details_number=  data['tattoo_details_number'],
                bodyplace=data["tattoo_body_place"],
                tattoo_place_photo=data["tattoo_place_photo"],
                tattoo_place_video_note=data["tattoo_place_video_note"],
                tattoo_place_video=data["tattoo_place_video"],
            )
            session.add(new_tattoo_order)
            schedule = session.get(ScheduleCalendar, data["schedule_id"])
            schedule.status = "–ó–∞–Ω—è—Ç"
            session.commit()
            
        start_time = datetime.strptime(
            f"{data['date'].strftime('%Y-%m-%d')}T{data['start_time']}:00",
            "%Y-%m-%dT%H:%M:%S"
        )

        end_time = datetime.strptime(
            f"{data['date'].strftime('%Y-%m-%d')}T{data['end_date_time']}:00",
            "%Y-%m-%dT%H:%M:%S"
        )

        event = await obj.add_event(
            CALENDAR_ID,
            f"–ù–æ–≤—ã–π —Ç–∞—Ç—É –∑–∞–∫–∞–∑ ‚Ññ {tattoo_order_number}",
            f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ç—É: {data['tattoo_name']}, \n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ç—É: {data['tattoo_note']}, \n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {data['order_note']}, \n"
            f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {message.from_user.full_name}\n",
            start_time,  # '2023-02-02T09:07:00',
            end_time,  # '2023-02-03T17:07:00'
        )
    
    with Session(engine) as session:
        user = session.scalars(select(User).where(User.name == message.text)).all()
    if user!= []:
        user_name = user[0].name

    await state.finish()
    await FSM_Admin_username_info.user_name.set()

    async with state.proxy() as data:
        data["username"] = message.text
        data["order_number"] = tattoo_order_number

    if user != [] and user is not None:
        if message.text != user_name:
            for i in range(2):
                await FSM_Admin_username_info.next() #-> load_telegram
            await message.reply("–í–≤–µ–¥–∏ –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º")
        else:
            await FSM_Admin_username_info.next() #-> answer_user_name
            await message.reply(
                f"–≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥ –∏–º–µ–Ω–µ–º {user_name}?",
                reply_markup=kb_client.kb_yes_no,
            )
    else:
        for i in range(2):
            await FSM_Admin_username_info.next() #-> load_telegram
        await message.reply("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º")


# TODO: –ó–ê–ö–û–ù–ß–ò–¢–¨ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –î–õ–Ø –¢–ê–¢–£ –ó–ê–ö–ê–ó–ê, –î–õ–Ø –ê–î–ú–ò–ù–ê
async def answer_user_name(message: types.Message, state: FSMContext):
    if message.text == kb_client.yes_str:
        async with state.proxy() as data:
            username, telegram, phone = (
                data["username"],
                data["telegram"],
                data["phone"],
            )
            order_number = data["order_number"]
            await bot.send_message(
                message.from_user.id,
                f"–•–æ—Ä–æ—à–æ, —Ç–≤–æ–π –∑–∞–∫–∞–∑ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {order_number}"
                f" –æ—Ñ–æ—Ä–º–ª–µ–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º {telegram}, —Ç–µ–ª–µ—Ñ–æ–Ω {phone}!",
                reply_markup=kb_admin.kb_main,
            )
        await state.finish()
    elif message.text == kb_client.no_str:
        await FSM_Admin_username_info.next()
        await message.reply(
            "–•–æ—Ä–æ—à–æ, —ç—Ç–æ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º"
        )
    else:
        await FSM_Admin_username_info.next()


async def load_telegram(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["telegram"] = message.text
    await FSM_Admin_username_info.next()
    await message.reply(
        '–í–≤–µ–¥–∏ –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω, –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –Ω–µ –∑–Ω–∞—é –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"',
        reply_markup=kb_admin.kb_admin_has_no_phone_username,
    )


async def load_phone(message: types.Message, state: FSMContext):
    if message.text in kb_admin.phone_answer:
        number = "–ù–µ—Ç –Ω–æ–º–µ—Ä–∞"
    else:
        number = message.text
        result = re.match(
            r"^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?"
            "[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$",
            number,
        )

        if not result:
            await message.reply("–ù–æ–º–µ—Ä –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ.")

    async with state.proxy() as data:
        with Session(engine) as session:
            new_user = User(
                name = data["username"],
                telegram_name= data["telegram"],
                phone = number
            )
            session.add(new_user)
            session.commit()
            
        username, telegram, phone = data["username"], data["telegram"], number
        tattoo_order_number = data["order_number"]

        await bot.send_message(
            message.from_user.id,
            f"–•–æ—Ä–æ—à–æ, —Ç–≤–æ–π –∑–∞–∫–∞–∑ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {tattoo_order_number}"
            f" –æ—Ñ–æ—Ä–º–ª–µ–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º {telegram}, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}!",
            reply_markup=kb_admin.kb_tattoo_order_commands,
        )
        await state.finish()  #  –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ


def register_handlers_admin_tattoo_order(dp: Dispatcher):
    # --------------------------------------TATTOO ORDER------------------------------
    dp.register_message_handler(
        get_tattoo_order_and_item_command_list, commands=["—Ç–∞—Ç—É_–∑–∞–∫–∞–∑—ã"]
    )
    dp.register_message_handler(
        get_tattoo_order_and_item_command_list,
        Text(equals="–¢–∞—Ç—É –∑–∞–∫–∞–∑—ã", ignore_case=True),
        state=None,
    )

    dp.register_message_handler(
        command_get_info_tattoo_orders, commands=["–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑—ã"]
    )
    dp.register_message_handler(
        command_get_info_tattoo_orders,
        Text(equals="–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑—ã", ignore_case=True),
        state=None,
    )
    dp.register_message_handler(
        get_status_name, state=FSM_Admin_get_info_orders.order_status_name
    )

    dp.register_message_handler(
        command_get_info_tattoo_order, commands=["–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑"]
    )
    dp.register_message_handler(
        command_get_info_tattoo_order,
        Text(equals="–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑", ignore_case=True),
        state=None,
    )

    dp.register_message_handler(
        get_name_for_view_tattoo_order,
        state=FSM_Admin_command_get_info_tattoo_order.order_name,
    )

    dp.register_message_handler(
        command_delete_info_tattoo_orders, commands=["—É–¥–∞–ª–∏—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑"]
    )
    dp.register_message_handler(
        command_delete_info_tattoo_orders,
        Text(equals="—É–¥–∞–ª–∏—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑", ignore_case=True),
        state=None,
    )
    dp.register_message_handler(
        delete_info_tattoo_orders,
        state=FSM_Admin_delete_tattoo_order.tattoo_order_number,
    )

    dp.register_message_handler(
        command_tattoo_order_change_status, commands=["–∏–∑–º–µ–Ω–∏—Ç—å_—Å—Ç–∞—Ç—É—Å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑–∞"]
    )
    dp.register_message_handler(
        command_tattoo_order_change_status,
        Text(equals="–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞—Ç—É –∑–∞–∫–∞–∑–∞", ignore_case=True),
        state=None,
    )
    dp.register_message_handler(
        get_new_status_for_tattoo_order,
        state=FSM_Admin_tattoo_order_change_status.tattoo_order_number,
    )
    dp.register_message_handler(
        complete_new_status_for_tattoo_order,
        state=FSM_Admin_tattoo_order_change_status.tattoo_order_new_status,
    )

    dp.register_message_handler(
        get_answer_for_getting_check_document,
        state=FSM_Admin_tattoo_order_change_status.get_answer_for_getting_check_document,
    )
    dp.register_message_handler(
        get_price_for_check_document,
        state=FSM_Admin_tattoo_order_change_status.get_price_for_check_document,
    )

    dp.register_message_handler(
        get_check_document,
        content_types=["photo", "document"],
        state=FSM_Admin_tattoo_order_change_status.get_check_document,
    )

    # --------------------------------CHANGE TATTOO ORDER-------------------------------------
    dp.register_message_handler(
        command_command_change_info_tattoo_order, commands=["–∏–∑–º–µ–Ω–∏—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑"]
    )
    dp.register_message_handler(
        command_command_change_info_tattoo_order,
        Text(equals="–∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑", ignore_case=True),
        state=None,
    )

    dp.register_message_handler(
        get_tattoo_order_number, state=FSM_Admin_change_tattoo_order.tattoo_order_number
    )
    dp.register_message_handler(
        get_new_state_info, state=FSM_Admin_change_tattoo_order.tattoo_new_state
    )
    dp.register_message_handler(
        get_new_photo,
        content_types=["photo"],
        state=FSM_Admin_change_tattoo_order.new_photo,
    )

    # --------------------------CREATE TATTOO ORDER--------------------------------------
    dp.register_message_handler(
        command_command_create_tattoo_orders, commands=["–¥–æ–±–∞–≤–∏—Ç—å_—Ç–∞—Ç—É_–∑–∞–∫–∞–∑"]
    )
    dp.register_message_handler(
        command_command_create_tattoo_orders,
        Text(equals="–¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ç—É –∑–∞–∫–∞–∑", ignore_case=True),
        state=None,
    )
    dp.register_message_handler(
        get_tattoo_type, state=FSM_Admin_tattoo_order.get_tattoo_type
    )
    dp.register_message_handler(
        choice_tattoo_order_admin, state=FSM_Admin_tattoo_order.tattoo_choice
    )
    dp.register_message_handler(
        load_tattoo_order_name, state=FSM_Admin_tattoo_order.tattoo_name
    )
    dp.register_message_handler(
        load_tattoo_order_photo,
        content_types=["photo", "text"],
        state=FSM_Admin_tattoo_order.tattoo_photo,
    )
    dp.register_message_handler(
        load_tattoo_order_size, state=FSM_Admin_tattoo_order.tattoo_size
    )
    dp.register_message_handler(
        get_tattoo_color, state=FSM_Admin_tattoo_order.tattoo_color
    )

    dp.register_message_handler(
        load_tattoo_order_schedule_choice,
        state=FSM_Admin_tattoo_order.schedule_for_tattoo_order_choice,
    )
    dp.register_message_handler(
        load_new_tattoo_order_date_from_schedule,
        state=FSM_Admin_tattoo_order.new_tattoo_order_date_from_schedule,
    )

    # dp.register_message_handler(load_datemiting, state=FSM_Client_tattoo_order.date_meeting)
    dp.register_message_handler(
        load_tattoo_order_note, state=FSM_Admin_tattoo_order.tattoo_note
    )
    dp.register_message_handler(
        get_body_name, state=FSM_Admin_tattoo_order.get_body_name_state
    )
    dp.register_message_handler(
        get_body_photo,
        content_types=["photo", "text", "video", "video_note"],
        state=FSM_Admin_tattoo_order.get_body_photo_state,
    )
    dp.register_message_handler(
        choi—Åe_tattoo_order_desctiption,
        state=FSM_Admin_tattoo_order.order_desctiption_choi—Åe,
    )
    dp.register_message_handler(
        load_order_desctiption_after_choice,
        state=FSM_Admin_tattoo_order.order_desctiption,
    )
    dp.register_message_handler(
        get_price_tattoo_order_after_choice,
        state=FSM_Admin_tattoo_order.tattoo_order_price,
    )

    dp.register_message_handler(
        get_tattoo_order_state, state=FSM_Admin_tattoo_order.tattoo_order_state
    )

    dp.register_message_handler(
        get_tattoo_order_check, state=FSM_Admin_tattoo_order.tattoo_order_check
    )
    dp.register_message_handler(
        get_tattoo_order_check_next,
        content_types=["photo", "document"],
        state=FSM_Admin_tattoo_order.tattoo_order_check_next,
    )

    dp.register_message_handler(
        tattoo_order_load_user_name, state=FSM_Admin_tattoo_order.user_name
    )
    dp.register_message_handler(
        answer_user_name, state=FSM_Admin_username_info.user_name_answer
    )
    dp.register_message_handler(
        load_telegram, state=FSM_Admin_username_info.telegram
    )  # –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å—é –∏–Ω—Ñ—É –ø—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.register_message_handler(
        load_phone, state=FSM_Admin_username_info.phone
    )  # –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å—é –∏–Ω—Ñ—É –ø—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
