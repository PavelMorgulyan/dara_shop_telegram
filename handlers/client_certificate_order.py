from create_bot import dp, bot
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from msg.main_msg import *
from keyboards import kb_client, kb_admin
from handlers.other import *
from handlers.client import (
    CODE_LENTH,
    ORDER_CODE_LENTH,
    fill_client_table,
    CALENDAR_ID,
    DARA_ID,
    FSM_Client_username_info,
)
from validate import check_pdf_document_payment, check_photo_payment
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from db.db_setter import set_to_table
from db.db_getter import get_info_many_from_table

from datetime import datetime

from sqlalchemy.orm import Session
from sqlalchemy import select
from db.sqlalchemy_base.db_classes import *


# -------------------------------------------------------—Åert ORDER-----------------------------------------
class FSM_Client_—Åert_item(StatesGroup):
    —Åert_price = State()
    —Åert_payment_choise = State()
    cert_payment_state_first = State()
    # cert_payment_state_second = State()


# /—Ö–æ—á—É_—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
async def command_load_—Åert_item(message: types.Message):
    if message.text in ["X–æ—á—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç üé´", "/get_certificate"]:
        await FSM_Client_—Åert_item.—Åert_price.set()
        await bot.send_message(
            message.from_id,
            "‚ùî –ù–∞ –∫–∞–∫—É—é —Ü–µ–Ω—É —Ö–æ—Ç–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?",
            reply_markup=kb_admin.kb_price,
        )


async def load_—Åert_price(message: types.Message, state: FSMContext):
    if message.text in kb_admin.price + kb_admin.another_price:
        async with state.proxy() as data:
            data["price"] = message.text
            data["status"] = STATES["open"]

        await FSM_Client_—Åert_item.next()  # -> load_—Åert_payment_choice
        await bot.send_message(
            message.from_id,
            f"‚ùî –•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ–π—á–∞—Å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ª–∏—á–Ω–æ –ø–æ–∑–∂–µ?",
            reply_markup=kb_client.kb_pay_now_later,
        )

    elif message.text == "–î—Ä—É–≥–∞—è":
        await bot.send_message(
            message.from_id,
            f"‚ùî –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?",
            reply_markup=kb_admin.kb_another_price,
        )

    elif any(text in message.text for text in LIST_CANCEL_COMMANDS):
        await state.finish()
        await bot.send_message(
            message.from_id,
            MSG_CANCEL_ACTION + MSG_BACK_TO_HOME,
            reply_markup=kb_client.kb_client_main,
        )
    else:
        await bot.send_message(
            message.from_id, f"‚≠ïÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —Å—É–º–º—É –∏–∑ —Å–ø–∏—Å–∫–∞"
        )


async def create_cert_order(data: dict, message: types.Message):
    with Session(engine) as session:
        new_cert_order = Orders(
            order_type="—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
            user_id=message.from_id,
            order_state=STATES["open"],
            order_number=data["cert_order_number"],
            creation_date=datetime.now(),
            price=data["price"],
            check_document=data["check_document"],
            username=message.from_user.full_name,
            code=data["code"],
        )
        session.add(new_cert_order)
        session.commit()


async def load_—Åert_payment_choice(message: types.Message, state: FSMContext):
    if message.text == kb_client.now_str:
        async with state.proxy() as data:
            price = data["price"]
        await FSM_Client_—Åert_item.next()  # -> process_pre_checkout_query
        await bot.send_message(message.chat.id, "üåø –û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ —Å–µ–π—á–∞—Å!")
        await bot.send_message(
            message.chat.id,
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Å—É–º–º—É {price} "
            "–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +7(925)885-07-87 –Ω–∞ –∏–º—è –î–∞—Ä–∏—è –†–µ–¥–≤–∞–Ω –≠",
            reply_markup=kb_client.kb_cancel,
        )

        """
        PRICE_—Åert_1K = types.LabeledPrice(label='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 1000 –†.', amount=100000)
        PRICE_—Åert_2K = types.LabeledPrice(label='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 2000 –†.', amount=200000)
        PRICE_—Åert_3K = types.LabeledPrice(label='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 3000 –†.', amount=300000)
        PRICE_—Åert_4K = types.LabeledPrice(label='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 4000 –†.', amount=400000)
        PRICE_—Åert_5K = types.LabeledPrice(label='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 5000 –†.', amount=500000)
        async with state.proxy() as data:
            if PAYMENTS_PROVIDER_TOKEN.split(':')[1] == 'TEST':
                await bot.send_message(message.chat.id, '–¢.–∫. —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –º–æ–∂–Ω–æ'\
            '  –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n'\
                    '1) VISA 4111 1111 1111 1111, –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è 2024/12,'\
            '  –∫–æ–¥ 123, –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ 3-D Secure: 12345678\n'\
                    '2) MasterCard 5555 5555 5555 5599, –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: '\
            ' 2024/12, –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ: 123\n'\
                    '3) MasterCard 5479 2700 0000 0000, –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: '\
            ' 2022/03, –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ: 123, –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ 3-D Secure: 12345678\n'\
                    '4) –ú–ò–† 2200 0000 0000 0053, –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: '\
            ' 2024/12, –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ: 123, –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ 3-D Secure: 12345678')
            price = data['—Åert_price']
            await bot.send_invoice(
                message.chat.id,
                title=f'–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {price}',
                description='–î–∞—Ä–∏—Ç–µ –µ–≥–æ –ª—é–±–∏–º—ã–º –∏ –¥—Ä—É–∑—å—è–º, –≤—Å–µ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—É—é —Ç–∞—Ç—É—à–∫—É! :blush:‚ú®',
                provider_token=PAYMENTS_PROVIDER_TOKEN,
                currency='rub',
                is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                prices=[types.LabeledPrice(label=f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {price}", amount = price)],
                start_parameter='certificate',
                payload='some-invoice-payload-for-our-internal-use'
            )#  ,photo_height=512, photo_width=512, photo_size=512,# !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
            await FSM_Client_—Åert_item.next()
            # await state.finish()
        """
    elif message.text == kb_client.later_str:
        # await bot.send_message(message.chat.id, '–î–∞, —Ö–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–∂–µ. '\
        # '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–Ω–µ—Å–µ–Ω–∞ –∑–∞ –Ω–µ–≥–æ –æ–ø–ª–∞—Ç–∞.')

        async with state.proxy() as data:
            data["cert_order_number"] = await generate_random_order_number(
                ORDER_CODE_LENTH
            )
            data["check_document"] = []
            new_cert_order = {
                "price": data["price"],
                "status": data["status"],
                "code": None,
                "cert_order_number": data["cert_order_number"],
                "check_document": data["check_document"],
            }
            await create_cert_order(new_cert_order, message)
        with Session(engine) as session:
            user = session.scalars(
                select(User).where(User.telegram_id == message.from_id)
            ).all()
        await state.finish()
        if user == []:
            await bot.send_message(
                message.chat.id,
                f"üçÄ –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ—á—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
            )
            await bot.send_message(
                message.chat.id,
                MSG_TO_CHOICE_CLIENT_PHONE,
                reply_markup=kb_client.kb_phone_number,
            )
            await FSM_Client_username_info.phone.set()

        else:
            await bot.send_message(
                message.chat.id,
                f"üçÄ –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {data['cert_order_number']}. "
                "–ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n\n",
            )
            await bot.send_message(
                message.chat.id,
                '‚ùï –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –º–æ–∂–Ω–æ –≤ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìÉ" -> '
                '"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã üé´".',
            )

            await bot.send_message(
                message.chat.id,
                MSG_DO_CLIENT_WANT_TO_DO_MORE,
                reply_markup=kb_client.kb_client_main,
            )

    elif any(text in message.text for text in LIST_CANCEL_COMMANDS):
        await state.finish()
        await bot.send_message(
            message.from_id,
            MSG_CANCEL_ACTION + MSG_BACK_TO_HOME,
            reply_markup=kb_client.kb_client_main,
        )

    else:
        await bot.send_message(
            message.from_id,
            "‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã:"
            " —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ—Ç–æ–º. –ò–ª–∏ –æ—Ç–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏–µ.",
        )


# @dp.pre_checkout_query_handler(state=FSM_Client_—Åert_item.cert_payment_state_first)
async def process_pre_checkout_query(
    pre_checkout_query: types.PreCheckoutQuery, state=FSMContext
):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)  # type: ignore
    await FSM_Client_—Åert_item.next()


# @dp.message_handler(content_types=[ContentType.SUCCESSFUL_PAYMENT],
# state=FSM_Client_—Åert_item.cert_payment_state_second)
async def process_successful_cert_payment(message: types.Message, state=FSMContext):
    check_doc = {}
    async with state.proxy() as data:  # type: ignore
        price = str(data["price"])

    """
    MESSAGES['successful_payment'].format(
        total_amount=message.successful_payment.total_amount // 100,
        currency=message.successful_payment.currency
    )"""

    if message.content_type == "text":
        if any(text in message.text.lower() for text in LIST_CANCEL_COMMANDS):
            await state.finish()  # type: ignore
            await bot.send_message(
                message.from_id,
                MSG_CANCEL_ACTION + MSG_BACK_TO_HOME,
                reply_markup=kb_client.kb_client_main,
            )

    else:
        doc_name = data["cert_order_number"]
        user_id = message.from_id

        if message.content_type == "document":
            doc_name += ".pdf"
            file = message.document.file_id
            check_doc = await check_pdf_document_payment(
                user_id, price, doc_name, message.document.file_id
            )

        else:
            doc_name = doc_name[:-4] + ".jpg"
            file = message.photo[0].file_id

            check_doc = await check_photo_payment(
                message, user_id, price, doc_name, file
            )

        if check_doc["result"]:
            async with state.proxy() as data:  # type: ignore
                if ".jpg" not in doc_name:
                    data["check_document"] = message.document.file_id
                else:
                    data["check_document"] = message.photo[0].file_id
                code = await generate_random_code(CODE_LENTH)
                cert_order_number = data["cert_order_number"]
                status = data["status"]
                new_cert_order = {
                    "price": int(data["price"]),
                    "status": STATES["paid"],
                    "code": code,
                    "cert_order_number": data["cert_order_number"],
                    "check_document": data["check_document"],
                }

                await create_cert_order(new_cert_order, message)

            await bot.send_message(
                message.chat.id,
                f"üéâ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω! \n"
                f"üé´ –í–æ—Ç –≤–∞—à –∫–æ–¥ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å—É–º–º—É {price}: {code}. \n\n"
                "‚ùï –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏!",
            )

            with Session(engine) as session:
                user = session.scalars(
                    select(User).where(User.telegram_id == message.from_id)
                ).all()

            if user == []:
                await bot.send_message(
                    message.chat.id,
                    f"üéâ –í–∞—à –∑–∞–∫–∞–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {cert_order_number} –ø–æ—á—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω!",
                )

                await bot.send_message(
                    message.chat.id,
                    MSG_TO_CHOICE_CLIENT_PHONE,
                    reply_markup=kb_client.kb_phone_number,
                )

                await state.finish()  # type: ignore
                await FSM_Client_username_info.phone.set()

            else:
                await bot.send_message(
                    message.chat.id,
                    f"üéâ –í–∞—à –∑–∞–∫–∞–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {cert_order_number} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                    "üü¢ –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?",
                    reply_markup=kb_client.kb_client_main,
                )

                await state.finish()  # type: ignore

            # TODO –¥–æ–ø–æ–ª–Ω–∏—Ç—å id –®—É–Ω—ã
            if DARA_ID != 0:
                await bot.send_message(
                    DARA_ID,
                    f"‚ùï–î–æ—Ä–æ–≥–∞—è –¢–∞—Ç—É-–º–∞—Å—Ç–µ—Ä–∏—Ü–∞! "
                    f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} –ø–æ—è–≤–∏–ª—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å—É–º–º—É {price}\n"
                    f"–ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {cert_order_number}!\n"
                    f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}",
                )

        else:
            await bot.send_message(
                message.from_id, f"‚ùå –ß–µ–∫ –Ω–µ –ø–æ–¥–æ—à–µ–ª. %s " % check_doc["repost_msg"]
            )


# --------------------------------------GET VIEW CERT ORDER-----------------------------------------
# /–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_–º–æ–∏_—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
async def get_clients_cert_order(message: types.Message):
    with Session(engine) as session:
        orders = session.scalars(
            select(Orders)
            .where(Orders.user_id == message.from_id)
            .where(order.order_type == "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
        ).all()
    if orders == []:
        await bot.send_message(
            message.from_id,
            "‚≠ïÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤. "
            '–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –∫–Ω–æ–ø–∫–µ "–•–æ—á—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.',
            reply_markup=kb_client.kb_choice_order_view,
        )
    else:
        msg = ""
        for order in orders:
            msg += (
                f"üé´ C–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Ññ {order.order_number}\n"
                f"üí∞ –¶–µ–Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {order.price}\n"
            )

            if order.order_state == STATES["paid"]:
                msg += f"üè∑ –ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {order.code}\n"

            elif order.code in [STATES["complete"]] + list(STATES["closed"].values()):
                msg += "üö´ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n"

            else:
                msg += "‚õîÔ∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω\n"

            await bot.send_message(message.from_user.id, msg)
            msg = ""

        await bot.send_message(
            message.from_user.id,
            MSG_DO_CLIENT_WANT_TO_DO_MORE,
            reply_markup=kb_client.kb_choice_order_view,
        )


# ------------------------------------------—Åert------------------------------------------------------
def register_handlers_client_cert(dp: Dispatcher):
    dp.register_message_handler(
        command_load_—Åert_item,
        Text(equals=kb_client.client_main["client_want_cert"], ignore_case=True),
    )
    dp.register_message_handler(
        command_load_—Åert_item, commands=["get_certificate"], state=None
    )
    dp.register_message_handler(load_—Åert_price, state=FSM_Client_—Åert_item.—Åert_price)
    dp.register_message_handler(
        load_—Åert_payment_choice, state=FSM_Client_—Åert_item.—Åert_payment_choise
    )
    dp.register_message_handler(
        process_successful_cert_payment,
        content_types=["photo", "document", "message", "text"],
        state=FSM_Client_—Åert_item.cert_payment_state_first,
    )
    dp.register_message_handler(
        get_clients_cert_order,
        Text(
            equals=kb_client.choice_order_view["client_watch_cert_order"],
            ignore_case=True,
        ),
    )
    # dp.pre_checkout_query_handler(process_pre_checkout_query, func=lambda query: True)
    # dp.register_message_handler(process_successful_payment,  content_types=ContentType.SUCCESSFUL_PAYMENT)
